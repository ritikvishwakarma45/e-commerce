{
  "version": 3,
  "sources": ["../../../../../../node_modules/@ionic/core/dist/esm/ion-route_4.entry.js"],
  "sourcesContent": ["/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\r\nimport { r as registerInstance, d as createEvent, o as printIonError, m as printIonWarning, k as getElement, e as getIonMode, h, j as Host } from './index-B_U9CtaY.js';\r\nimport { c as componentOnReady, p as debounce } from './helpers-1O4D2b7y.js';\r\nimport { o as openURL, c as createColorClasses } from './theme-DiVJyqlX.js';\r\n\r\nconst Route = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        this.ionRouteDataChanged = createEvent(this, \"ionRouteDataChanged\", 7);\r\n        /**\r\n         * Relative path that needs to match in order for this route to apply.\r\n         *\r\n         * Accepts paths similar to expressjs so that you can define parameters\r\n         * in the url /foo/:bar where bar would be available in incoming props.\r\n         */\r\n        this.url = '';\r\n    }\r\n    onUpdate(newValue) {\r\n        this.ionRouteDataChanged.emit(newValue);\r\n    }\r\n    onComponentProps(newValue, oldValue) {\r\n        if (newValue === oldValue) {\r\n            return;\r\n        }\r\n        const keys1 = newValue ? Object.keys(newValue) : [];\r\n        const keys2 = oldValue ? Object.keys(oldValue) : [];\r\n        if (keys1.length !== keys2.length) {\r\n            this.onUpdate(newValue);\r\n            return;\r\n        }\r\n        for (const key of keys1) {\r\n            if (newValue[key] !== oldValue[key]) {\r\n                this.onUpdate(newValue);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    connectedCallback() {\r\n        this.ionRouteDataChanged.emit();\r\n    }\r\n    static get watchers() { return {\r\n        \"url\": [\"onUpdate\"],\r\n        \"component\": [\"onUpdate\"],\r\n        \"componentProps\": [\"onComponentProps\"]\r\n    }; }\r\n};\r\n\r\nconst RouteRedirect = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        this.ionRouteRedirectChanged = createEvent(this, \"ionRouteRedirectChanged\", 7);\r\n    }\r\n    propDidChange() {\r\n        this.ionRouteRedirectChanged.emit();\r\n    }\r\n    connectedCallback() {\r\n        this.ionRouteRedirectChanged.emit();\r\n    }\r\n    static get watchers() { return {\r\n        \"from\": [\"propDidChange\"],\r\n        \"to\": [\"propDidChange\"]\r\n    }; }\r\n};\r\n\r\nconst ROUTER_INTENT_NONE = 'root';\r\nconst ROUTER_INTENT_FORWARD = 'forward';\r\nconst ROUTER_INTENT_BACK = 'back';\r\n\r\n/** Join the non empty segments with \"/\". */\r\nconst generatePath = (segments) => {\r\n    const path = segments.filter((s) => s.length > 0).join('/');\r\n    return '/' + path;\r\n};\r\nconst generateUrl = (segments, useHash, queryString) => {\r\n    let url = generatePath(segments);\r\n    if (useHash) {\r\n        url = '#' + url;\r\n    }\r\n    if (queryString !== undefined) {\r\n        url += '?' + queryString;\r\n    }\r\n    return url;\r\n};\r\nconst writeSegments = (history, root, useHash, segments, direction, state, queryString) => {\r\n    const url = generateUrl([...parsePath(root).segments, ...segments], useHash, queryString);\r\n    if (direction === ROUTER_INTENT_FORWARD) {\r\n        history.pushState(state, '', url);\r\n    }\r\n    else {\r\n        history.replaceState(state, '', url);\r\n    }\r\n};\r\n/**\r\n * Transforms a chain to a list of segments.\r\n *\r\n * Notes:\r\n * - parameter segments of the form :param are replaced with their value,\r\n * - null is returned when a value is missing for any parameter segment.\r\n */\r\nconst chainToSegments = (chain) => {\r\n    const segments = [];\r\n    for (const route of chain) {\r\n        for (const segment of route.segments) {\r\n            if (segment[0] === ':') {\r\n                // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\r\n                const param = route.params && route.params[segment.slice(1)];\r\n                if (!param) {\r\n                    return null;\r\n                }\r\n                segments.push(param);\r\n            }\r\n            else if (segment !== '') {\r\n                segments.push(segment);\r\n            }\r\n        }\r\n    }\r\n    return segments;\r\n};\r\n/**\r\n * Removes the prefix segments from the path segments.\r\n *\r\n * Return:\r\n * - null when the path segments do not start with the passed prefix,\r\n * - the path segments after the prefix otherwise.\r\n */\r\nconst removePrefix = (prefix, segments) => {\r\n    if (prefix.length > segments.length) {\r\n        return null;\r\n    }\r\n    if (prefix.length <= 1 && prefix[0] === '') {\r\n        return segments;\r\n    }\r\n    for (let i = 0; i < prefix.length; i++) {\r\n        if (prefix[i] !== segments[i]) {\r\n            return null;\r\n        }\r\n    }\r\n    if (segments.length === prefix.length) {\r\n        return [''];\r\n    }\r\n    return segments.slice(prefix.length);\r\n};\r\nconst readSegments = (loc, root, useHash) => {\r\n    const prefix = parsePath(root).segments;\r\n    const pathname = useHash ? loc.hash.slice(1) : loc.pathname;\r\n    const segments = parsePath(pathname).segments;\r\n    return removePrefix(prefix, segments);\r\n};\r\n/**\r\n * Parses the path to:\r\n * - segments an array of '/' separated parts,\r\n * - queryString (undefined when no query string).\r\n */\r\nconst parsePath = (path) => {\r\n    let segments = [''];\r\n    let queryString;\r\n    if (path != null) {\r\n        const qsStart = path.indexOf('?');\r\n        if (qsStart > -1) {\r\n            queryString = path.substring(qsStart + 1);\r\n            path = path.substring(0, qsStart);\r\n        }\r\n        segments = path\r\n            .split('/')\r\n            .map((s) => s.trim())\r\n            .filter((s) => s.length > 0);\r\n        if (segments.length === 0) {\r\n            segments = [''];\r\n        }\r\n    }\r\n    return { segments, queryString };\r\n};\r\n\r\nconst printRoutes = (routes) => {\r\n    console.group(`[ion-core] ROUTES[${routes.length}]`);\r\n    for (const chain of routes) {\r\n        const segments = [];\r\n        chain.forEach((r) => segments.push(...r.segments));\r\n        const ids = chain.map((r) => r.id);\r\n        console.debug(`%c ${generatePath(segments)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\r\n    }\r\n    console.groupEnd();\r\n};\r\nconst printRedirects = (redirects) => {\r\n    console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\r\n    for (const redirect of redirects) {\r\n        if (redirect.to) {\r\n            console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to.segments)}`, 'font-weight: bold');\r\n        }\r\n    }\r\n    console.groupEnd();\r\n};\r\n\r\n/**\r\n * Activates the passed route chain.\r\n *\r\n * There must be exactly one outlet per route entry in the chain.\r\n *\r\n * The methods calls setRouteId on each of the outlet with the corresponding route entry in the chain.\r\n * setRouteId will create or select the view in the outlet.\r\n */\r\nconst writeNavState = async (root, chain, direction, index, changed = false, animation) => {\r\n    try {\r\n        // find next navigation outlet in the DOM\r\n        const outlet = searchNavNode(root);\r\n        // make sure we can continue interacting the DOM, otherwise abort\r\n        if (index >= chain.length || !outlet) {\r\n            return changed;\r\n        }\r\n        await new Promise((resolve) => componentOnReady(outlet, resolve));\r\n        const route = chain[index];\r\n        const result = await outlet.setRouteId(route.id, route.params, direction, animation);\r\n        // if the outlet changed the page, reset navigation to neutral (no direction)\r\n        // this means nested outlets will not animate\r\n        if (result.changed) {\r\n            direction = ROUTER_INTENT_NONE;\r\n            changed = true;\r\n        }\r\n        // recursively set nested outlets\r\n        changed = await writeNavState(result.element, chain, direction, index + 1, changed, animation);\r\n        // once all nested outlets are visible let's make the parent visible too,\r\n        // using markVisible prevents flickering\r\n        if (result.markVisible) {\r\n            await result.markVisible();\r\n        }\r\n        return changed;\r\n    }\r\n    catch (e) {\r\n        printIonError('[ion-router] - Exception in writeNavState:', e);\r\n        return false;\r\n    }\r\n};\r\n/**\r\n * Recursively walks the outlet in the DOM.\r\n *\r\n * The function returns a list of RouteID corresponding to each of the outlet and the last outlet without a RouteID.\r\n */\r\nconst readNavState = async (root) => {\r\n    const ids = [];\r\n    let outlet;\r\n    let node = root;\r\n    // eslint-disable-next-line no-cond-assign\r\n    while ((outlet = searchNavNode(node))) {\r\n        const id = await outlet.getRouteId();\r\n        if (id) {\r\n            node = id.element;\r\n            id.element = undefined;\r\n            ids.push(id);\r\n        }\r\n        else {\r\n            break;\r\n        }\r\n    }\r\n    return { ids, outlet };\r\n};\r\nconst waitUntilNavNode = () => {\r\n    if (searchNavNode(document.body)) {\r\n        return Promise.resolve();\r\n    }\r\n    return new Promise((resolve) => {\r\n        window.addEventListener('ionNavWillLoad', () => resolve(), { once: true });\r\n    });\r\n};\r\n/** Selector for all the outlets supported by the router. */\r\nconst OUTLET_SELECTOR = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\r\nconst searchNavNode = (root) => {\r\n    if (!root) {\r\n        return undefined;\r\n    }\r\n    if (root.matches(OUTLET_SELECTOR)) {\r\n        return root;\r\n    }\r\n    const outlet = root.querySelector(OUTLET_SELECTOR);\r\n    return outlet !== null && outlet !== void 0 ? outlet : undefined;\r\n};\r\n\r\n/**\r\n * Returns whether the given redirect matches the given path segments.\r\n *\r\n * A redirect matches when the segments of the path and redirect.from are equal.\r\n * Note that segments are only checked until redirect.from contains a '*' which matches any path segment.\r\n * The path ['some', 'path', 'to', 'page'] matches both ['some', 'path', 'to', 'page'] and ['some', 'path', '*'].\r\n */\r\nconst matchesRedirect = (segments, redirect) => {\r\n    const { from, to } = redirect;\r\n    if (to === undefined) {\r\n        return false;\r\n    }\r\n    if (from.length > segments.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < from.length; i++) {\r\n        const expected = from[i];\r\n        if (expected === '*') {\r\n            return true;\r\n        }\r\n        if (expected !== segments[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return from.length === segments.length;\r\n};\r\n/** Returns the first redirect matching the path segments or undefined when no match found. */\r\nconst findRouteRedirect = (segments, redirects) => {\r\n    return redirects.find((redirect) => matchesRedirect(segments, redirect));\r\n};\r\nconst matchesIDs = (ids, chain) => {\r\n    const len = Math.min(ids.length, chain.length);\r\n    let score = 0;\r\n    for (let i = 0; i < len; i++) {\r\n        const routeId = ids[i];\r\n        const routeChain = chain[i];\r\n        // Skip results where the route id does not match the chain at the same index\r\n        if (routeId.id.toLowerCase() !== routeChain.id) {\r\n            break;\r\n        }\r\n        if (routeId.params) {\r\n            const routeIdParams = Object.keys(routeId.params);\r\n            // Only compare routes with the chain that have the same number of parameters.\r\n            if (routeIdParams.length === routeChain.segments.length) {\r\n                // Maps the route's params into a path based on the path variable names,\r\n                // to compare against the route chain format.\r\n                //\r\n                // Before:\r\n                // ```ts\r\n                // {\r\n                //  params: {\r\n                //    s1: 'a',\r\n                //    s2: 'b'\r\n                //  }\r\n                // }\r\n                // ```\r\n                //\r\n                // After:\r\n                // ```ts\r\n                // [':s1',':s2']\r\n                // ```\r\n                //\r\n                const pathWithParams = routeIdParams.map((key) => `:${key}`);\r\n                for (let j = 0; j < pathWithParams.length; j++) {\r\n                    // Skip results where the path variable is not a match\r\n                    if (pathWithParams[j].toLowerCase() !== routeChain.segments[j]) {\r\n                        break;\r\n                    }\r\n                    // Weight path matches for the same index higher.\r\n                    score++;\r\n                }\r\n            }\r\n        }\r\n        // Weight id matches\r\n        score++;\r\n    }\r\n    return score;\r\n};\r\n/**\r\n * Matches the segments against the chain.\r\n *\r\n * Returns:\r\n * - null when there is no match,\r\n * - a chain with the params properties updated with the parameter segments on match.\r\n */\r\nconst matchesSegments = (segments, chain) => {\r\n    const inputSegments = new RouterSegments(segments);\r\n    let matchesDefault = false;\r\n    let allparams;\r\n    for (let i = 0; i < chain.length; i++) {\r\n        const chainSegments = chain[i].segments;\r\n        if (chainSegments[0] === '') {\r\n            matchesDefault = true;\r\n        }\r\n        else {\r\n            for (const segment of chainSegments) {\r\n                const data = inputSegments.next();\r\n                // data param\r\n                if (segment[0] === ':') {\r\n                    if (data === '') {\r\n                        return null;\r\n                    }\r\n                    allparams = allparams || [];\r\n                    const params = allparams[i] || (allparams[i] = {});\r\n                    params[segment.slice(1)] = data;\r\n                }\r\n                else if (data !== segment) {\r\n                    return null;\r\n                }\r\n            }\r\n            matchesDefault = false;\r\n        }\r\n    }\r\n    const matches = matchesDefault ? matchesDefault === (inputSegments.next() === '') : true;\r\n    if (!matches) {\r\n        return null;\r\n    }\r\n    if (allparams) {\r\n        return chain.map((route, i) => ({\r\n            id: route.id,\r\n            segments: route.segments,\r\n            params: mergeParams(route.params, allparams[i]),\r\n            beforeEnter: route.beforeEnter,\r\n            beforeLeave: route.beforeLeave,\r\n        }));\r\n    }\r\n    return chain;\r\n};\r\n/**\r\n * Merges the route parameter objects.\r\n * Returns undefined when both parameters are undefined.\r\n */\r\nconst mergeParams = (a, b) => {\r\n    return a || b ? Object.assign(Object.assign({}, a), b) : undefined;\r\n};\r\n/**\r\n * Finds the best match for the ids in the chains.\r\n *\r\n * Returns the best match or null when no match is found.\r\n * When a chain is returned the parameters are updated from the RouteIDs.\r\n * That is they contain both the componentProps of the <ion-route> and the parameter segment.\r\n */\r\nconst findChainForIDs = (ids, chains) => {\r\n    let match = null;\r\n    let maxMatches = 0;\r\n    for (const chain of chains) {\r\n        const score = matchesIDs(ids, chain);\r\n        if (score > maxMatches) {\r\n            match = chain;\r\n            maxMatches = score;\r\n        }\r\n    }\r\n    if (match) {\r\n        return match.map((route, i) => {\r\n            var _a;\r\n            return ({\r\n                id: route.id,\r\n                segments: route.segments,\r\n                params: mergeParams(route.params, (_a = ids[i]) === null || _a === void 0 ? void 0 : _a.params),\r\n            });\r\n        });\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Finds the best match for the segments in the chains.\r\n *\r\n * Returns the best match or null when no match is found.\r\n * When a chain is returned the parameters are updated from the segments.\r\n * That is they contain both the componentProps of the <ion-route> and the parameter segments.\r\n */\r\nconst findChainForSegments = (segments, chains) => {\r\n    let match = null;\r\n    let bestScore = 0;\r\n    for (const chain of chains) {\r\n        const matchedChain = matchesSegments(segments, chain);\r\n        if (matchedChain !== null) {\r\n            const score = computePriority(matchedChain);\r\n            if (score > bestScore) {\r\n                bestScore = score;\r\n                match = matchedChain;\r\n            }\r\n        }\r\n    }\r\n    return match;\r\n};\r\n/**\r\n * Computes the priority of a chain.\r\n *\r\n * Parameter segments are given a lower priority over fixed segments.\r\n *\r\n * Considering the following 2 chains matching the path /path/to/page:\r\n * - /path/to/:where\r\n * - /path/to/page\r\n *\r\n * The second one will be given a higher priority because \"page\" is a fixed segment (vs \":where\", a parameter segment).\r\n */\r\nconst computePriority = (chain) => {\r\n    let score = 1;\r\n    let level = 1;\r\n    for (const route of chain) {\r\n        for (const segment of route.segments) {\r\n            if (segment[0] === ':') {\r\n                score += Math.pow(1, level);\r\n            }\r\n            else if (segment !== '') {\r\n                score += Math.pow(2, level);\r\n            }\r\n            level++;\r\n        }\r\n    }\r\n    return score;\r\n};\r\nclass RouterSegments {\r\n    constructor(segments) {\r\n        this.segments = segments.slice();\r\n    }\r\n    next() {\r\n        if (this.segments.length > 0) {\r\n            return this.segments.shift();\r\n        }\r\n        return '';\r\n    }\r\n}\r\n\r\nconst readProp = (el, prop) => {\r\n    if (prop in el) {\r\n        return el[prop];\r\n    }\r\n    if (el.hasAttribute(prop)) {\r\n        return el.getAttribute(prop);\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Extracts the redirects (that is <ion-route-redirect> elements inside the root).\r\n *\r\n * The redirects are returned as a list of RouteRedirect.\r\n */\r\nconst readRedirects = (root) => {\r\n    return Array.from(root.children)\r\n        .filter((el) => el.tagName === 'ION-ROUTE-REDIRECT')\r\n        .map((el) => {\r\n        const to = readProp(el, 'to');\r\n        return {\r\n            from: parsePath(readProp(el, 'from')).segments,\r\n            to: to == null ? undefined : parsePath(to),\r\n        };\r\n    });\r\n};\r\n/**\r\n * Extracts all the routes (that is <ion-route> elements inside the root).\r\n *\r\n * The routes are returned as a list of chains - the flattened tree.\r\n */\r\nconst readRoutes = (root) => {\r\n    return flattenRouterTree(readRouteNodes(root));\r\n};\r\n/**\r\n * Reads the route nodes as a tree modeled after the DOM tree of <ion-route> elements.\r\n *\r\n * Note: routes without a component are ignored together with their children.\r\n */\r\nconst readRouteNodes = (node) => {\r\n    return Array.from(node.children)\r\n        .filter((el) => el.tagName === 'ION-ROUTE' && el.component)\r\n        .map((el) => {\r\n        const component = readProp(el, 'component');\r\n        return {\r\n            segments: parsePath(readProp(el, 'url')).segments,\r\n            id: component.toLowerCase(),\r\n            params: el.componentProps,\r\n            beforeLeave: el.beforeLeave,\r\n            beforeEnter: el.beforeEnter,\r\n            children: readRouteNodes(el),\r\n        };\r\n    });\r\n};\r\n/**\r\n * Flattens a RouterTree in a list of chains.\r\n *\r\n * Each chain represents a path from the root node to a terminal node.\r\n */\r\nconst flattenRouterTree = (nodes) => {\r\n    const chains = [];\r\n    for (const node of nodes) {\r\n        flattenNode([], chains, node);\r\n    }\r\n    return chains;\r\n};\r\n/** Flattens a route node recursively and push each branch to the chains list. */\r\nconst flattenNode = (chain, chains, node) => {\r\n    chain = [\r\n        ...chain,\r\n        {\r\n            id: node.id,\r\n            segments: node.segments,\r\n            params: node.params,\r\n            beforeLeave: node.beforeLeave,\r\n            beforeEnter: node.beforeEnter,\r\n        },\r\n    ];\r\n    if (node.children.length === 0) {\r\n        chains.push(chain);\r\n        return;\r\n    }\r\n    for (const child of node.children) {\r\n        flattenNode(chain, chains, child);\r\n    }\r\n};\r\n\r\nconst Router = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        this.ionRouteWillChange = createEvent(this, \"ionRouteWillChange\", 7);\r\n        this.ionRouteDidChange = createEvent(this, \"ionRouteDidChange\", 7);\r\n        this.previousPath = null;\r\n        this.busy = false;\r\n        this.state = 0;\r\n        this.lastState = 0;\r\n        /**\r\n         * The root path to use when matching URLs. By default, this is set to \"/\", but you can specify\r\n         * an alternate prefix for all URL paths.\r\n         */\r\n        this.root = '/';\r\n        /**\r\n         * The router can work in two \"modes\":\r\n         * - With hash: `/index.html#/path/to/page`\r\n         * - Without hash: `/path/to/page`\r\n         *\r\n         * Using one or another might depend in the requirements of your app and/or where it's deployed.\r\n         *\r\n         * Usually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might\r\n         * requires additional server-side configuration in order to properly work.\r\n         *\r\n         * On the other side hash-navigation is much easier to deploy, it even works over the file protocol.\r\n         *\r\n         * By default, this property is `true`, change to `false` to allow hash-less URLs.\r\n         */\r\n        this.useHash = true;\r\n    }\r\n    async componentWillLoad() {\r\n        await waitUntilNavNode();\r\n        const canProceed = await this.runGuards(this.getSegments());\r\n        if (canProceed !== true) {\r\n            if (typeof canProceed === 'object') {\r\n                const { redirect } = canProceed;\r\n                const path = parsePath(redirect);\r\n                this.setSegments(path.segments, ROUTER_INTENT_NONE, path.queryString);\r\n                await this.writeNavStateRoot(path.segments, ROUTER_INTENT_NONE);\r\n            }\r\n        }\r\n        else {\r\n            await this.onRoutesChanged();\r\n        }\r\n    }\r\n    componentDidLoad() {\r\n        window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\r\n        window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\r\n    }\r\n    async onPopState() {\r\n        const direction = this.historyDirection();\r\n        let segments = this.getSegments();\r\n        const canProceed = await this.runGuards(segments);\r\n        if (canProceed !== true) {\r\n            if (typeof canProceed === 'object') {\r\n                segments = parsePath(canProceed.redirect).segments;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        return this.writeNavStateRoot(segments, direction);\r\n    }\r\n    onBackButton(ev) {\r\n        ev.detail.register(0, (processNextHandler) => {\r\n            this.back();\r\n            processNextHandler();\r\n        });\r\n    }\r\n    /** @internal */\r\n    async canTransition() {\r\n        const canProceed = await this.runGuards();\r\n        if (canProceed !== true) {\r\n            if (typeof canProceed === 'object') {\r\n                return canProceed.redirect;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Navigate to the specified path.\r\n     *\r\n     * @param path The path to navigate to.\r\n     * @param direction The direction of the animation. Defaults to `\"forward\"`.\r\n     * @param animation A custom animation to use for the transition.\r\n     */\r\n    async push(path, direction = 'forward', animation) {\r\n        var _a;\r\n        if (path.startsWith('.')) {\r\n            const currentPath = (_a = this.previousPath) !== null && _a !== void 0 ? _a : '/';\r\n            // Convert currentPath to an URL by pre-pending a protocol and a host to resolve the relative path.\r\n            const url = new URL(path, `https://host/${currentPath}`);\r\n            path = url.pathname + url.search;\r\n        }\r\n        let parsedPath = parsePath(path);\r\n        const canProceed = await this.runGuards(parsedPath.segments);\r\n        if (canProceed !== true) {\r\n            if (typeof canProceed === 'object') {\r\n                parsedPath = parsePath(canProceed.redirect);\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        this.setSegments(parsedPath.segments, direction, parsedPath.queryString);\r\n        return this.writeNavStateRoot(parsedPath.segments, direction, animation);\r\n    }\r\n    /** Go back to previous page in the window.history. */\r\n    back() {\r\n        window.history.back();\r\n        return Promise.resolve(this.waitPromise);\r\n    }\r\n    /** @internal */\r\n    async printDebug() {\r\n        printRoutes(readRoutes(this.el));\r\n        printRedirects(readRedirects(this.el));\r\n    }\r\n    /** @internal */\r\n    async navChanged(direction) {\r\n        if (this.busy) {\r\n            printIonWarning('[ion-router] - Router is busy, navChanged was cancelled.');\r\n            return false;\r\n        }\r\n        const { ids, outlet } = await readNavState(window.document.body);\r\n        const routes = readRoutes(this.el);\r\n        const chain = findChainForIDs(ids, routes);\r\n        if (!chain) {\r\n            printIonWarning('[ion-router] - No matching URL for', ids.map((i) => i.id));\r\n            return false;\r\n        }\r\n        const segments = chainToSegments(chain);\r\n        if (!segments) {\r\n            printIonWarning('[ion-router] - Router could not match path because some required param is missing.');\r\n            return false;\r\n        }\r\n        this.setSegments(segments, direction);\r\n        await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, segments, null, ids.length);\r\n        return true;\r\n    }\r\n    /** This handler gets called when a `ion-route-redirect` component is added to the DOM or if the from or to property of such node changes. */\r\n    onRedirectChanged() {\r\n        const segments = this.getSegments();\r\n        if (segments && findRouteRedirect(segments, readRedirects(this.el))) {\r\n            this.writeNavStateRoot(segments, ROUTER_INTENT_NONE);\r\n        }\r\n    }\r\n    /** This handler gets called when a `ion-route` component is added to the DOM or if the from or to property of such node changes. */\r\n    onRoutesChanged() {\r\n        return this.writeNavStateRoot(this.getSegments(), ROUTER_INTENT_NONE);\r\n    }\r\n    historyDirection() {\r\n        var _a;\r\n        const win = window;\r\n        if (win.history.state === null) {\r\n            this.state++;\r\n            win.history.replaceState(this.state, win.document.title, (_a = win.document.location) === null || _a === void 0 ? void 0 : _a.href);\r\n        }\r\n        const state = win.history.state;\r\n        const lastState = this.lastState;\r\n        this.lastState = state;\r\n        if (state > lastState || (state >= lastState && lastState > 0)) {\r\n            return ROUTER_INTENT_FORWARD;\r\n        }\r\n        if (state < lastState) {\r\n            return ROUTER_INTENT_BACK;\r\n        }\r\n        return ROUTER_INTENT_NONE;\r\n    }\r\n    async writeNavStateRoot(segments, direction, animation) {\r\n        if (!segments) {\r\n            printIonError('[ion-router] - URL is not part of the routing set.');\r\n            return false;\r\n        }\r\n        // lookup redirect rule\r\n        const redirects = readRedirects(this.el);\r\n        const redirect = findRouteRedirect(segments, redirects);\r\n        let redirectFrom = null;\r\n        if (redirect) {\r\n            const { segments: toSegments, queryString } = redirect.to;\r\n            this.setSegments(toSegments, direction, queryString);\r\n            redirectFrom = redirect.from;\r\n            segments = toSegments;\r\n        }\r\n        // lookup route chain\r\n        const routes = readRoutes(this.el);\r\n        const chain = findChainForSegments(segments, routes);\r\n        if (!chain) {\r\n            printIonError('[ion-router] - The path does not match any route.');\r\n            return false;\r\n        }\r\n        // write DOM give\r\n        return this.safeWriteNavState(document.body, chain, direction, segments, redirectFrom, 0, animation);\r\n    }\r\n    async safeWriteNavState(node, chain, direction, segments, redirectFrom, index = 0, animation) {\r\n        const unlock = await this.lock();\r\n        let changed = false;\r\n        try {\r\n            changed = await this.writeNavState(node, chain, direction, segments, redirectFrom, index, animation);\r\n        }\r\n        catch (e) {\r\n            printIonError('[ion-router] - Exception in safeWriteNavState:', e);\r\n        }\r\n        unlock();\r\n        return changed;\r\n    }\r\n    async lock() {\r\n        const p = this.waitPromise;\r\n        let resolve;\r\n        this.waitPromise = new Promise((r) => (resolve = r));\r\n        if (p !== undefined) {\r\n            await p;\r\n        }\r\n        return resolve;\r\n    }\r\n    /**\r\n     * Executes the beforeLeave hook of the source route and the beforeEnter hook of the target route if they exist.\r\n     *\r\n     * When the beforeLeave hook does not return true (to allow navigating) then that value is returned early and the beforeEnter is executed.\r\n     * Otherwise the beforeEnterHook hook of the target route is executed.\r\n     */\r\n    async runGuards(to = this.getSegments(), from) {\r\n        if (from === undefined) {\r\n            from = parsePath(this.previousPath).segments;\r\n        }\r\n        if (!to || !from) {\r\n            return true;\r\n        }\r\n        const routes = readRoutes(this.el);\r\n        const fromChain = findChainForSegments(from, routes);\r\n        // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\r\n        const beforeLeaveHook = fromChain && fromChain[fromChain.length - 1].beforeLeave;\r\n        const canLeave = beforeLeaveHook ? await beforeLeaveHook() : true;\r\n        if (canLeave === false || typeof canLeave === 'object') {\r\n            return canLeave;\r\n        }\r\n        const toChain = findChainForSegments(to, routes);\r\n        // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\r\n        const beforeEnterHook = toChain && toChain[toChain.length - 1].beforeEnter;\r\n        return beforeEnterHook ? beforeEnterHook() : true;\r\n    }\r\n    async writeNavState(node, chain, direction, segments, redirectFrom, index = 0, animation) {\r\n        if (this.busy) {\r\n            printIonWarning('[ion-router] - Router is busy, transition was cancelled.');\r\n            return false;\r\n        }\r\n        this.busy = true;\r\n        // generate route event and emit will change\r\n        const routeEvent = this.routeChangeEvent(segments, redirectFrom);\r\n        if (routeEvent) {\r\n            this.ionRouteWillChange.emit(routeEvent);\r\n        }\r\n        const changed = await writeNavState(node, chain, direction, index, false, animation);\r\n        this.busy = false;\r\n        // emit did change\r\n        if (routeEvent) {\r\n            this.ionRouteDidChange.emit(routeEvent);\r\n        }\r\n        return changed;\r\n    }\r\n    setSegments(segments, direction, queryString) {\r\n        this.state++;\r\n        writeSegments(window.history, this.root, this.useHash, segments, direction, this.state, queryString);\r\n    }\r\n    getSegments() {\r\n        return readSegments(window.location, this.root, this.useHash);\r\n    }\r\n    routeChangeEvent(toSegments, redirectFromSegments) {\r\n        const from = this.previousPath;\r\n        const to = generatePath(toSegments);\r\n        this.previousPath = to;\r\n        if (to === from) {\r\n            return null;\r\n        }\r\n        const redirectedFrom = redirectFromSegments ? generatePath(redirectFromSegments) : null;\r\n        return {\r\n            from,\r\n            redirectedFrom,\r\n            to,\r\n        };\r\n    }\r\n    get el() { return getElement(this); }\r\n};\r\n\r\nconst routerLinkCss = \":host{--background:transparent;--color:var(--ion-color-primary, #0054e9);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\";\r\n\r\nconst RouterLink = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        /**\r\n         * When using a router, it specifies the transition direction when navigating to\r\n         * another page using `href`.\r\n         */\r\n        this.routerDirection = 'forward';\r\n        this.onClick = (ev) => {\r\n            openURL(this.href, ev, this.routerDirection, this.routerAnimation);\r\n        };\r\n    }\r\n    render() {\r\n        const mode = getIonMode(this);\r\n        const attrs = {\r\n            href: this.href,\r\n            rel: this.rel,\r\n            target: this.target,\r\n        };\r\n        return (h(Host, { key: 'd7f2affcde45c5fbb6cb46cd1c30008ee92a68c5', onClick: this.onClick, class: createColorClasses(this.color, {\r\n                [mode]: true,\r\n                'ion-activatable': true,\r\n            }) }, h(\"a\", Object.assign({ key: 'babafae85ca5c6429958d383feff0493ff8cf33e' }, attrs), h(\"slot\", { key: '50314e9555bbf6dffa0c50c3f763009dee59b10b' }))));\r\n    }\r\n};\r\nRouterLink.style = routerLinkCss;\r\n\r\nexport { Route as ion_route, RouteRedirect as ion_route_redirect, Router as ion_router, RouterLink as ion_router_link };\r\n"],
  "mappings": "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",
  "names": []
}
