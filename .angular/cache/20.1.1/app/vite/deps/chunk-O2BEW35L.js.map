{
  "version": 3,
  "sources": ["../../../../../../node_modules/@ionic/core/dist/esm/haptic-DzAMWJuk.js"],
  "sourcesContent": ["/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\r\nimport { g as getCapacitor } from './capacitor-CFERIeaU.js';\r\n\r\nvar ImpactStyle;\r\n(function (ImpactStyle) {\r\n    /**\r\n     * A collision between large, heavy user interface elements\r\n     *\r\n     * @since 1.0.0\r\n     */\r\n    ImpactStyle[\"Heavy\"] = \"HEAVY\";\r\n    /**\r\n     * A collision between moderately sized user interface elements\r\n     *\r\n     * @since 1.0.0\r\n     */\r\n    ImpactStyle[\"Medium\"] = \"MEDIUM\";\r\n    /**\r\n     * A collision between small, light user interface elements\r\n     *\r\n     * @since 1.0.0\r\n     */\r\n    ImpactStyle[\"Light\"] = \"LIGHT\";\r\n})(ImpactStyle || (ImpactStyle = {}));\r\nvar NotificationType;\r\n(function (NotificationType) {\r\n    /**\r\n     * A notification feedback type indicating that a task has completed successfully\r\n     *\r\n     * @since 1.0.0\r\n     */\r\n    NotificationType[\"Success\"] = \"SUCCESS\";\r\n    /**\r\n     * A notification feedback type indicating that a task has produced a warning\r\n     *\r\n     * @since 1.0.0\r\n     */\r\n    NotificationType[\"Warning\"] = \"WARNING\";\r\n    /**\r\n     * A notification feedback type indicating that a task has failed\r\n     *\r\n     * @since 1.0.0\r\n     */\r\n    NotificationType[\"Error\"] = \"ERROR\";\r\n})(NotificationType || (NotificationType = {}));\r\nconst HapticEngine = {\r\n    getEngine() {\r\n        const capacitor = getCapacitor();\r\n        if (capacitor === null || capacitor === void 0 ? void 0 : capacitor.isPluginAvailable('Haptics')) {\r\n            // Capacitor\r\n            return capacitor.Plugins.Haptics;\r\n        }\r\n        return undefined;\r\n    },\r\n    available() {\r\n        const engine = this.getEngine();\r\n        if (!engine) {\r\n            return false;\r\n        }\r\n        const capacitor = getCapacitor();\r\n        /**\r\n         * Developers can manually import the\r\n         * Haptics plugin in their app which will cause\r\n         * getEngine to return the Haptics engine. However,\r\n         * the Haptics engine will throw an error if\r\n         * used in a web browser that does not support\r\n         * the Vibrate API. This check avoids that error\r\n         * if the browser does not support the Vibrate API.\r\n         */\r\n        if ((capacitor === null || capacitor === void 0 ? void 0 : capacitor.getPlatform()) === 'web') {\r\n            // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\r\n            return typeof navigator !== 'undefined' && navigator.vibrate !== undefined;\r\n        }\r\n        return true;\r\n    },\r\n    impact(options) {\r\n        const engine = this.getEngine();\r\n        if (!engine) {\r\n            return;\r\n        }\r\n        engine.impact({ style: options.style });\r\n    },\r\n    notification(options) {\r\n        const engine = this.getEngine();\r\n        if (!engine) {\r\n            return;\r\n        }\r\n        engine.notification({ type: options.type });\r\n    },\r\n    selection() {\r\n        this.impact({ style: ImpactStyle.Light });\r\n    },\r\n    selectionStart() {\r\n        const engine = this.getEngine();\r\n        if (!engine) {\r\n            return;\r\n        }\r\n        engine.selectionStart();\r\n    },\r\n    selectionChanged() {\r\n        const engine = this.getEngine();\r\n        if (!engine) {\r\n            return;\r\n        }\r\n        engine.selectionChanged();\r\n    },\r\n    selectionEnd() {\r\n        const engine = this.getEngine();\r\n        if (!engine) {\r\n            return;\r\n        }\r\n        engine.selectionEnd();\r\n    },\r\n};\r\n/**\r\n * Check to see if the Haptic Plugin is available\r\n * @return Returns `true` or false if the plugin is available\r\n */\r\nconst hapticAvailable = () => {\r\n    return HapticEngine.available();\r\n};\r\n/**\r\n * Trigger a selection changed haptic event. Good for one-time events\r\n * (not for gestures)\r\n */\r\nconst hapticSelection = () => {\r\n    hapticAvailable() && HapticEngine.selection();\r\n};\r\n/**\r\n * Tell the haptic engine that a gesture for a selection change is starting.\r\n */\r\nconst hapticSelectionStart = () => {\r\n    hapticAvailable() && HapticEngine.selectionStart();\r\n};\r\n/**\r\n * Tell the haptic engine that a selection changed during a gesture.\r\n */\r\nconst hapticSelectionChanged = () => {\r\n    hapticAvailable() && HapticEngine.selectionChanged();\r\n};\r\n/**\r\n * Tell the haptic engine we are done with a gesture. This needs to be\r\n * called lest resources are not properly recycled.\r\n */\r\nconst hapticSelectionEnd = () => {\r\n    hapticAvailable() && HapticEngine.selectionEnd();\r\n};\r\n/**\r\n * Use this to indicate success/failure/warning to the user.\r\n * options should be of the type `{ style: ImpactStyle.LIGHT }` (or `MEDIUM`/`HEAVY`)\r\n */\r\nconst hapticImpact = (options) => {\r\n    hapticAvailable() && HapticEngine.impact(options);\r\n};\r\n\r\nexport { ImpactStyle as I, hapticSelectionChanged as a, hapticSelectionStart as b, hapticSelection as c, hapticImpact as d, hapticSelectionEnd as h };\r\n"],
  "mappings": ";;;;;AAKA,IAAI;AAAA,CACH,SAAUA,cAAa;AAMpB,EAAAA,aAAY,OAAO,IAAI;AAMvB,EAAAA,aAAY,QAAQ,IAAI;AAMxB,EAAAA,aAAY,OAAO,IAAI;AAC3B,GAAG,gBAAgB,cAAc,CAAC,EAAE;AACpC,IAAI;AAAA,CACH,SAAUC,mBAAkB;AAMzB,EAAAA,kBAAiB,SAAS,IAAI;AAM9B,EAAAA,kBAAiB,SAAS,IAAI;AAM9B,EAAAA,kBAAiB,OAAO,IAAI;AAChC,GAAG,qBAAqB,mBAAmB,CAAC,EAAE;AAC9C,IAAM,eAAe;AAAA,EACjB,YAAY;AACR,UAAM,YAAY,aAAa;AAC/B,QAAI,cAAc,QAAQ,cAAc,SAAS,SAAS,UAAU,kBAAkB,SAAS,GAAG;AAE9F,aAAO,UAAU,QAAQ;AAAA,IAC7B;AACA,WAAO;AAAA,EACX;AAAA,EACA,YAAY;AACR,UAAM,SAAS,KAAK,UAAU;AAC9B,QAAI,CAAC,QAAQ;AACT,aAAO;AAAA,IACX;AACA,UAAM,YAAY,aAAa;AAU/B,SAAK,cAAc,QAAQ,cAAc,SAAS,SAAS,UAAU,YAAY,OAAO,OAAO;AAE3F,aAAO,OAAO,cAAc,eAAe,UAAU,YAAY;AAAA,IACrE;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAO,SAAS;AACZ,UAAM,SAAS,KAAK,UAAU;AAC9B,QAAI,CAAC,QAAQ;AACT;AAAA,IACJ;AACA,WAAO,OAAO,EAAE,OAAO,QAAQ,MAAM,CAAC;AAAA,EAC1C;AAAA,EACA,aAAa,SAAS;AAClB,UAAM,SAAS,KAAK,UAAU;AAC9B,QAAI,CAAC,QAAQ;AACT;AAAA,IACJ;AACA,WAAO,aAAa,EAAE,MAAM,QAAQ,KAAK,CAAC;AAAA,EAC9C;AAAA,EACA,YAAY;AACR,SAAK,OAAO,EAAE,OAAO,YAAY,MAAM,CAAC;AAAA,EAC5C;AAAA,EACA,iBAAiB;AACb,UAAM,SAAS,KAAK,UAAU;AAC9B,QAAI,CAAC,QAAQ;AACT;AAAA,IACJ;AACA,WAAO,eAAe;AAAA,EAC1B;AAAA,EACA,mBAAmB;AACf,UAAM,SAAS,KAAK,UAAU;AAC9B,QAAI,CAAC,QAAQ;AACT;AAAA,IACJ;AACA,WAAO,iBAAiB;AAAA,EAC5B;AAAA,EACA,eAAe;AACX,UAAM,SAAS,KAAK,UAAU;AAC9B,QAAI,CAAC,QAAQ;AACT;AAAA,IACJ;AACA,WAAO,aAAa;AAAA,EACxB;AACJ;AAKA,IAAM,kBAAkB,MAAM;AAC1B,SAAO,aAAa,UAAU;AAClC;AAKA,IAAM,kBAAkB,MAAM;AAC1B,kBAAgB,KAAK,aAAa,UAAU;AAChD;AAIA,IAAM,uBAAuB,MAAM;AAC/B,kBAAgB,KAAK,aAAa,eAAe;AACrD;AAIA,IAAM,yBAAyB,MAAM;AACjC,kBAAgB,KAAK,aAAa,iBAAiB;AACvD;AAKA,IAAM,qBAAqB,MAAM;AAC7B,kBAAgB,KAAK,aAAa,aAAa;AACnD;AAKA,IAAM,eAAe,CAAC,YAAY;AAC9B,kBAAgB,KAAK,aAAa,OAAO,OAAO;AACpD;",
  "names": ["ImpactStyle", "NotificationType"]
}
