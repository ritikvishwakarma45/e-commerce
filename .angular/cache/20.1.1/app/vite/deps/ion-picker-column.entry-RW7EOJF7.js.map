{
  "version": 3,
  "sources": ["../../../../../../node_modules/@ionic/core/dist/esm/ion-picker-column.entry.js"],
  "sourcesContent": ["/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\r\nimport { r as registerInstance, d as createEvent, a as isPlatform, h, e as getIonMode, j as Host, k as getElement } from './index-B_U9CtaY.js';\r\nimport { d as doc } from './index-ZjP4CjeZ.js';\r\nimport { r as raf, g as getElementRoot } from './helpers-1O4D2b7y.js';\r\nimport { b as hapticSelectionStart, a as hapticSelectionChanged, h as hapticSelectionEnd } from './haptic-DzAMWJuk.js';\r\nimport { c as createColorClasses } from './theme-DiVJyqlX.js';\r\nimport './capacitor-CFERIeaU.js';\r\n\r\nconst pickerColumnCss = \":host{display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;max-width:100%;height:200px;font-size:22px;text-align:center}.assistive-focusable{left:0;right:0;top:0;bottom:0;position:absolute;z-index:1;pointer-events:none}.assistive-focusable:focus{outline:none}.picker-opts{-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px;padding-top:0px;padding-bottom:0px;min-width:26px;max-height:200px;outline:none;text-align:inherit;-webkit-scroll-snap-type:y mandatory;-ms-scroll-snap-type:y mandatory;scroll-snap-type:y mandatory;overflow-x:hidden;overflow-y:scroll;scrollbar-width:none}.picker-item-empty{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;display:block;width:100%;height:34px;border:0px;outline:none;background:transparent;color:inherit;font-family:var(--ion-font-family, inherit);font-size:inherit;line-height:34px;text-align:inherit;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.picker-opts::-webkit-scrollbar{display:none}::slotted(ion-picker-column-option){display:block;scroll-snap-align:center}.picker-item-empty,:host(:not([disabled])) ::slotted(ion-picker-column-option.option-disabled){scroll-snap-align:none}::slotted([slot=prefix]),::slotted([slot=suffix]){max-width:200px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}::slotted([slot=prefix]){-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px;padding-top:0;padding-bottom:0;-ms-flex-pack:end;justify-content:end}::slotted([slot=suffix]){-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px;padding-top:0;padding-bottom:0;-ms-flex-pack:start;justify-content:start}:host(.picker-column-disabled) .picker-opts{overflow-y:hidden}:host(.picker-column-disabled) ::slotted(ion-picker-column-option){cursor:default;opacity:0.4;pointer-events:none}@media (any-hover: hover){:host(:focus) .picker-opts{outline:none;background:rgba(var(--ion-color-base-rgb), 0.2)}}\";\r\n\r\nconst PickerColumn = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        this.ionChange = createEvent(this, \"ionChange\", 7);\r\n        this.isScrolling = false;\r\n        this.isColumnVisible = false;\r\n        this.canExitInputMode = true;\r\n        this.updateValueTextOnScroll = false;\r\n        this.ariaLabel = null;\r\n        this.isActive = false;\r\n        /**\r\n         * If `true`, the user cannot interact with the picker.\r\n         */\r\n        this.disabled = false;\r\n        /**\r\n         * The color to use from your application's color palette.\r\n         * Default options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\r\n         * For more information on colors, see [theming](/docs/theming/basics).\r\n         */\r\n        this.color = 'primary';\r\n        /**\r\n         * If `true`, tapping the picker will\r\n         * reveal a number input keyboard that lets\r\n         * the user type in values for each picker\r\n         * column. This is useful when working\r\n         * with time pickers.\r\n         *\r\n         * @internal\r\n         */\r\n        this.numericInput = false;\r\n        this.centerPickerItemInView = (target, smooth = true, canExitInputMode = true) => {\r\n            const { isColumnVisible, scrollEl } = this;\r\n            if (isColumnVisible && scrollEl) {\r\n                // (Vertical offset from parent) - (three empty picker rows) + (half the height of the target to ensure the scroll triggers)\r\n                const top = target.offsetTop - 3 * target.clientHeight + target.clientHeight / 2;\r\n                if (scrollEl.scrollTop !== top) {\r\n                    /**\r\n                     * Setting this flag prevents input\r\n                     * mode from exiting in the picker column's\r\n                     * scroll callback. This is useful when the user manually\r\n                     * taps an item or types on the keyboard as both\r\n                     * of these can cause a scroll to occur.\r\n                     */\r\n                    this.canExitInputMode = canExitInputMode;\r\n                    this.updateValueTextOnScroll = false;\r\n                    scrollEl.scroll({\r\n                        top,\r\n                        left: 0,\r\n                        behavior: smooth ? 'smooth' : undefined,\r\n                    });\r\n                }\r\n            }\r\n        };\r\n        this.setPickerItemActiveState = (item, isActive) => {\r\n            if (isActive) {\r\n                item.classList.add(PICKER_ITEM_ACTIVE_CLASS);\r\n            }\r\n            else {\r\n                item.classList.remove(PICKER_ITEM_ACTIVE_CLASS);\r\n            }\r\n        };\r\n        /**\r\n         * When ionInputModeChange is emitted, each column\r\n         * needs to check if it is the one being made available\r\n         * for text entry.\r\n         */\r\n        this.inputModeChange = (ev) => {\r\n            if (!this.numericInput) {\r\n                return;\r\n            }\r\n            const { useInputMode, inputModeColumn } = ev.detail;\r\n            /**\r\n             * If inputModeColumn is undefined then this means\r\n             * all numericInput columns are being selected.\r\n             */\r\n            const isColumnActive = inputModeColumn === undefined || inputModeColumn === this.el;\r\n            if (!useInputMode || !isColumnActive) {\r\n                this.setInputModeActive(false);\r\n                return;\r\n            }\r\n            this.setInputModeActive(true);\r\n        };\r\n        /**\r\n         * Setting isActive will cause a re-render.\r\n         * As a result, we do not want to cause the\r\n         * re-render mid scroll as this will cause\r\n         * the picker column to jump back to\r\n         * whatever value was selected at the\r\n         * start of the scroll interaction.\r\n         */\r\n        this.setInputModeActive = (state) => {\r\n            if (this.isScrolling) {\r\n                this.scrollEndCallback = () => {\r\n                    this.isActive = state;\r\n                };\r\n                return;\r\n            }\r\n            this.isActive = state;\r\n        };\r\n        /**\r\n         * When the column scrolls, the component\r\n         * needs to determine which item is centered\r\n         * in the view and will emit an ionChange with\r\n         * the item object.\r\n         */\r\n        this.initializeScrollListener = () => {\r\n            /**\r\n             * The haptics for the wheel picker are\r\n             * an iOS-only feature. As a result, they should\r\n             * be disabled on Android.\r\n             */\r\n            const enableHaptics = isPlatform('ios');\r\n            const { el, scrollEl } = this;\r\n            let timeout;\r\n            let activeEl = this.activeItem;\r\n            const scrollCallback = () => {\r\n                raf(() => {\r\n                    var _a;\r\n                    if (!scrollEl)\r\n                        return;\r\n                    if (timeout) {\r\n                        clearTimeout(timeout);\r\n                        timeout = undefined;\r\n                    }\r\n                    if (!this.isScrolling) {\r\n                        enableHaptics && hapticSelectionStart();\r\n                        this.isScrolling = true;\r\n                    }\r\n                    /**\r\n                     * Select item in the center of the column\r\n                     * which is the month/year that we want to select\r\n                     */\r\n                    const bbox = scrollEl.getBoundingClientRect();\r\n                    const centerX = bbox.x + bbox.width / 2;\r\n                    const centerY = bbox.y + bbox.height / 2;\r\n                    /**\r\n                     * elementFromPoint returns the top-most element.\r\n                     * This means that if an ion-backdrop is overlaying the\r\n                     * picker then the appropriate picker column option will\r\n                     * not be selected. To account for this, we use elementsFromPoint\r\n                     * and use an Array.find to find the appropriate column option\r\n                     * at that point.\r\n                     *\r\n                     * Additionally, the picker column could be used in the\r\n                     * Shadow DOM (i.e. in ion-datetime) so we need to make\r\n                     * sure we are choosing the correct host otherwise\r\n                     * the elements returns by elementsFromPoint will be\r\n                     * retargeted. To account for this, we check to see\r\n                     * if the picker column has a parent shadow root. If\r\n                     * so, we use that shadow root when doing elementsFromPoint.\r\n                     * Otherwise, we just use the document.\r\n                     */\r\n                    const rootNode = el.getRootNode();\r\n                    const hasParentShadow = rootNode instanceof ShadowRoot;\r\n                    const referenceNode = hasParentShadow ? rootNode : doc;\r\n                    /**\r\n                     * If the reference node is undefined\r\n                     * then it's likely that doc is undefined\r\n                     * due to being in an SSR environment.\r\n                     */\r\n                    if (referenceNode === undefined) {\r\n                        return;\r\n                    }\r\n                    const elementsAtPoint = referenceNode.elementsFromPoint(centerX, centerY);\r\n                    /**\r\n                     * elementsFromPoint can returns multiple elements\r\n                     * so find the relevant picker column option if one exists.\r\n                     */\r\n                    let newActiveElement = elementsAtPoint.find((el) => el.tagName === 'ION-PICKER-COLUMN-OPTION');\r\n                    /**\r\n                     * TODO(FW-6594): Remove this workaround when iOS 16 is no longer\r\n                     * supported.\r\n                     *\r\n                     * If `elementsFromPoint` failed to find the active element (a known\r\n                     * issue on iOS 16 when elements are in a Shadow DOM and the\r\n                     * referenceNode is the document), a fallback to `elementFromPoint`\r\n                     * is used. While `elementsFromPoint` returns all elements,\r\n                     * `elementFromPoint` returns only the top-most, which is sufficient\r\n                     * for this use case and appears to handle Shadow DOM retargeting\r\n                     * more reliably in this specific iOS bug.\r\n                     */\r\n                    if (newActiveElement === undefined) {\r\n                        const fallbackActiveElement = referenceNode.elementFromPoint(centerX, centerY);\r\n                        if ((fallbackActiveElement === null || fallbackActiveElement === void 0 ? void 0 : fallbackActiveElement.tagName) === 'ION-PICKER-COLUMN-OPTION') {\r\n                            newActiveElement = fallbackActiveElement;\r\n                        }\r\n                    }\r\n                    if (activeEl !== undefined) {\r\n                        this.setPickerItemActiveState(activeEl, false);\r\n                    }\r\n                    if (newActiveElement === undefined || newActiveElement.disabled) {\r\n                        return;\r\n                    }\r\n                    /**\r\n                     * If we are selecting a new value,\r\n                     * we need to run haptics again.\r\n                     */\r\n                    if (newActiveElement !== activeEl) {\r\n                        enableHaptics && hapticSelectionChanged();\r\n                        if (this.canExitInputMode) {\r\n                            /**\r\n                             * The native iOS wheel picker\r\n                             * only dismisses the keyboard\r\n                             * once the selected item has changed\r\n                             * as a result of a swipe\r\n                             * from the user. If `canExitInputMode` is\r\n                             * `false` then this means that the\r\n                             * scroll is happening as a result of\r\n                             * the `value` property programmatically changing\r\n                             * either by an application or by the user via the keyboard.\r\n                             */\r\n                            this.exitInputMode();\r\n                        }\r\n                    }\r\n                    activeEl = newActiveElement;\r\n                    this.setPickerItemActiveState(newActiveElement, true);\r\n                    /**\r\n                     * Set the aria-valuetext even though the value prop has not been updated yet.\r\n                     * This enables some screen readers to announce the value as the users drag\r\n                     * as opposed to when their release their pointer from the screen.\r\n                     *\r\n                     * When the value is programmatically updated, we will smoothly scroll\r\n                     * to the new option. However, we do not want to update aria-valuetext mid-scroll\r\n                     * as that can cause the old value to be briefly set before being set to the\r\n                     * correct option. This will cause some screen readers to announce the old value\r\n                     * again before announcing the new value. The correct valuetext will be set on render.\r\n                     */\r\n                    if (this.updateValueTextOnScroll) {\r\n                        (_a = this.assistiveFocusable) === null || _a === void 0 ? void 0 : _a.setAttribute('aria-valuetext', this.getOptionValueText(newActiveElement));\r\n                    }\r\n                    timeout = setTimeout(() => {\r\n                        this.isScrolling = false;\r\n                        this.updateValueTextOnScroll = true;\r\n                        enableHaptics && hapticSelectionEnd();\r\n                        /**\r\n                         * Certain tasks (such as those that\r\n                         * cause re-renders) should only be done\r\n                         * once scrolling has finished, otherwise\r\n                         * flickering may occur.\r\n                         */\r\n                        const { scrollEndCallback } = this;\r\n                        if (scrollEndCallback) {\r\n                            scrollEndCallback();\r\n                            this.scrollEndCallback = undefined;\r\n                        }\r\n                        /**\r\n                         * Reset this flag as the\r\n                         * next scroll interaction could\r\n                         * be a scroll from the user. In this\r\n                         * case, we should exit input mode.\r\n                         */\r\n                        this.canExitInputMode = true;\r\n                        this.setValue(newActiveElement.value);\r\n                    }, 250);\r\n                });\r\n            };\r\n            /**\r\n             * Wrap this in an raf so that the scroll callback\r\n             * does not fire when component is initially shown.\r\n             */\r\n            raf(() => {\r\n                if (!scrollEl)\r\n                    return;\r\n                scrollEl.addEventListener('scroll', scrollCallback);\r\n                this.destroyScrollListener = () => {\r\n                    scrollEl.removeEventListener('scroll', scrollCallback);\r\n                };\r\n            });\r\n        };\r\n        /**\r\n         * Tells the parent picker to\r\n         * exit text entry mode. This is only called\r\n         * when the selected item changes during scroll, so\r\n         * we know that the user likely wants to scroll\r\n         * instead of type.\r\n         */\r\n        this.exitInputMode = () => {\r\n            const { parentEl } = this;\r\n            if (parentEl == null)\r\n                return;\r\n            parentEl.exitInputMode();\r\n            /**\r\n             * setInputModeActive only takes\r\n             * effect once scrolling stops to avoid\r\n             * a component re-render while scrolling.\r\n             * However, we want the visual active\r\n             * indicator to go away immediately, so\r\n             * we call classList.remove here.\r\n             */\r\n            this.el.classList.remove('picker-column-active');\r\n        };\r\n        /**\r\n         * Find the next enabled option after the active option.\r\n         * @param stride - How many options to \"jump\" over in order to select the next option.\r\n         * This can be used to implement PageUp/PageDown behaviors where pressing these keys\r\n         * scrolls the picker by more than 1 option. For example, a stride of 5 means select\r\n         * the enabled option 5 options after the active one. Note that the actual option selected\r\n         * may be past the stride if the option at the stride is disabled.\r\n         */\r\n        this.findNextOption = (stride = 1) => {\r\n            const { activeItem } = this;\r\n            if (!activeItem)\r\n                return null;\r\n            let prevNode = activeItem;\r\n            let node = activeItem.nextElementSibling;\r\n            while (node != null) {\r\n                if (stride > 0) {\r\n                    stride--;\r\n                }\r\n                if (node.tagName === 'ION-PICKER-COLUMN-OPTION' && !node.disabled && stride === 0) {\r\n                    return node;\r\n                }\r\n                prevNode = node;\r\n                // Use nextElementSibling instead of nextSibling to avoid text/comment nodes\r\n                node = node.nextElementSibling;\r\n            }\r\n            return prevNode;\r\n        };\r\n        /**\r\n         * Find the next enabled option after the active option.\r\n         * @param stride - How many options to \"jump\" over in order to select the next option.\r\n         * This can be used to implement PageUp/PageDown behaviors where pressing these keys\r\n         * scrolls the picker by more than 1 option. For example, a stride of 5 means select\r\n         * the enabled option 5 options before the active one. Note that the actual option selected\r\n         *  may be past the stride if the option at the stride is disabled.\r\n         */\r\n        this.findPreviousOption = (stride = 1) => {\r\n            const { activeItem } = this;\r\n            if (!activeItem)\r\n                return null;\r\n            let nextNode = activeItem;\r\n            let node = activeItem.previousElementSibling;\r\n            while (node != null) {\r\n                if (stride > 0) {\r\n                    stride--;\r\n                }\r\n                if (node.tagName === 'ION-PICKER-COLUMN-OPTION' && !node.disabled && stride === 0) {\r\n                    return node;\r\n                }\r\n                nextNode = node;\r\n                // Use previousElementSibling instead of previousSibling to avoid text/comment nodes\r\n                node = node.previousElementSibling;\r\n            }\r\n            return nextNode;\r\n        };\r\n        this.onKeyDown = (ev) => {\r\n            /**\r\n             * The below operations should be inverted when running on a mobile device.\r\n             * For example, swiping up will dispatch an \"ArrowUp\" event. On desktop,\r\n             * this should cause the previous option to be selected. On mobile, swiping\r\n             * up causes a view to scroll down. As a result, swiping up on mobile should\r\n             * cause the next option to be selected. The Home/End operations remain\r\n             * unchanged because those always represent the first/last options, respectively.\r\n             */\r\n            const mobile = isPlatform('mobile');\r\n            let newOption = null;\r\n            switch (ev.key) {\r\n                case 'ArrowDown':\r\n                    newOption = mobile ? this.findPreviousOption() : this.findNextOption();\r\n                    break;\r\n                case 'ArrowUp':\r\n                    newOption = mobile ? this.findNextOption() : this.findPreviousOption();\r\n                    break;\r\n                case 'PageUp':\r\n                    newOption = mobile ? this.findNextOption(5) : this.findPreviousOption(5);\r\n                    break;\r\n                case 'PageDown':\r\n                    newOption = mobile ? this.findPreviousOption(5) : this.findNextOption(5);\r\n                    break;\r\n                case 'Home':\r\n                    /**\r\n                     * There is no guarantee that the first child will be an ion-picker-column-option,\r\n                     * so we do not use firstElementChild.\r\n                     */\r\n                    newOption = this.el.querySelector('ion-picker-column-option:first-of-type');\r\n                    break;\r\n                case 'End':\r\n                    /**\r\n                     * There is no guarantee that the last child will be an ion-picker-column-option,\r\n                     * so we do not use lastElementChild.\r\n                     */\r\n                    newOption = this.el.querySelector('ion-picker-column-option:last-of-type');\r\n                    break;\r\n            }\r\n            if (newOption !== null) {\r\n                this.setValue(newOption.value);\r\n                // This stops any default browser behavior such as scrolling\r\n                ev.preventDefault();\r\n            }\r\n        };\r\n        /**\r\n         * Utility to generate the correct text for aria-valuetext.\r\n         */\r\n        this.getOptionValueText = (el) => {\r\n            var _a;\r\n            return el ? (_a = el.getAttribute('aria-label')) !== null && _a !== void 0 ? _a : el.innerText : '';\r\n        };\r\n        /**\r\n         * Render an element that overlays the column. This element is for assistive\r\n         * tech to allow users to navigate the column up/down. This element should receive\r\n         * focus as it listens for synthesized keyboard events as required by the\r\n         * slider role: https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/slider_role\r\n         */\r\n        this.renderAssistiveFocusable = () => {\r\n            const { activeItem } = this;\r\n            const valueText = this.getOptionValueText(activeItem);\r\n            /**\r\n             * When using the picker, the valuetext provides important context that valuenow\r\n             * does not. Additionally, using non-zero valuemin/valuemax values can cause\r\n             * WebKit to incorrectly announce numeric valuetext values (such as a year\r\n             * like \"2024\") as percentages: https://bugs.webkit.org/show_bug.cgi?id=273126\r\n             */\r\n            return (h(\"div\", { ref: (el) => (this.assistiveFocusable = el), class: \"assistive-focusable\", role: \"slider\", tabindex: this.disabled ? undefined : 0, \"aria-label\": this.ariaLabel, \"aria-valuemin\": 0, \"aria-valuemax\": 0, \"aria-valuenow\": 0, \"aria-valuetext\": valueText, \"aria-orientation\": \"vertical\", onKeyDown: (ev) => this.onKeyDown(ev) }));\r\n        };\r\n    }\r\n    ariaLabelChanged(newValue) {\r\n        this.ariaLabel = newValue;\r\n    }\r\n    valueChange() {\r\n        if (this.isColumnVisible) {\r\n            /**\r\n             * Only scroll the active item into view when the picker column\r\n             * is actively visible to the user.\r\n             */\r\n            this.scrollActiveItemIntoView(true);\r\n        }\r\n    }\r\n    /**\r\n     * Only setup scroll listeners\r\n     * when the picker is visible, otherwise\r\n     * the container will have a scroll\r\n     * height of 0px.\r\n     */\r\n    componentWillLoad() {\r\n        /**\r\n         * We cache parentEl in a local variable\r\n         * so we don't need to keep accessing\r\n         * the class variable (which comes with\r\n         * a small performance hit)\r\n         */\r\n        const parentEl = (this.parentEl = this.el.closest('ion-picker'));\r\n        const visibleCallback = (entries) => {\r\n            /**\r\n             * Browsers will sometimes group multiple IO events into a single callback.\r\n             * As a result, we want to grab the last/most recent event in case there are multiple events.\r\n             */\r\n            const ev = entries[entries.length - 1];\r\n            if (ev.isIntersecting) {\r\n                const { activeItem, el } = this;\r\n                this.isColumnVisible = true;\r\n                /**\r\n                 * Because this initial call to scrollActiveItemIntoView has to fire before\r\n                 * the scroll listener is set up, we need to manage the active class manually.\r\n                 */\r\n                const oldActive = getElementRoot(el).querySelector(`.${PICKER_ITEM_ACTIVE_CLASS}`);\r\n                if (oldActive) {\r\n                    this.setPickerItemActiveState(oldActive, false);\r\n                }\r\n                this.scrollActiveItemIntoView();\r\n                if (activeItem) {\r\n                    this.setPickerItemActiveState(activeItem, true);\r\n                }\r\n                this.initializeScrollListener();\r\n            }\r\n            else {\r\n                this.isColumnVisible = false;\r\n                if (this.destroyScrollListener) {\r\n                    this.destroyScrollListener();\r\n                    this.destroyScrollListener = undefined;\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * Set the root to be the parent picker element\r\n         * This causes the IO callback\r\n         * to be fired in WebKit as soon as the element\r\n         * is visible. If we used the default root value\r\n         * then WebKit would only fire the IO callback\r\n         * after any animations (such as a modal transition)\r\n         * finished, and there would potentially be a flicker.\r\n         */\r\n        new IntersectionObserver(visibleCallback, { threshold: 0.001, root: this.parentEl }).observe(this.el);\r\n        if (parentEl !== null) {\r\n            // TODO(FW-2832): type\r\n            parentEl.addEventListener('ionInputModeChange', (ev) => this.inputModeChange(ev));\r\n        }\r\n    }\r\n    componentDidRender() {\r\n        const { el, activeItem, isColumnVisible, value } = this;\r\n        if (isColumnVisible && !activeItem) {\r\n            const firstOption = el.querySelector('ion-picker-column-option');\r\n            /**\r\n             * If the picker column does not have an active item and the current value\r\n             * does not match the first item in the picker column, that means\r\n             * the value is out of bounds. In this case, we assign the value to the\r\n             * first item to match the scroll position of the column.\r\n             *\r\n             */\r\n            if (firstOption !== null && firstOption.value !== value) {\r\n                this.setValue(firstOption.value);\r\n            }\r\n        }\r\n    }\r\n    /** @internal  */\r\n    async scrollActiveItemIntoView(smooth = false) {\r\n        const activeEl = this.activeItem;\r\n        if (activeEl) {\r\n            this.centerPickerItemInView(activeEl, smooth, false);\r\n        }\r\n    }\r\n    /**\r\n     * Sets the value prop and fires the ionChange event.\r\n     * This is used when we need to fire ionChange from\r\n     * user-generated events that cannot be caught with normal\r\n     * input/change event listeners.\r\n     * @internal\r\n     */\r\n    async setValue(value) {\r\n        if (this.disabled === true || this.value === value) {\r\n            return;\r\n        }\r\n        this.value = value;\r\n        this.ionChange.emit({ value });\r\n    }\r\n    /**\r\n     * Sets focus on the scrollable container within the picker column.\r\n     * Use this method instead of the global `pickerColumn.focus()`.\r\n     */\r\n    async setFocus() {\r\n        if (this.assistiveFocusable) {\r\n            this.assistiveFocusable.focus();\r\n        }\r\n    }\r\n    connectedCallback() {\r\n        var _a;\r\n        this.ariaLabel = (_a = this.el.getAttribute('aria-label')) !== null && _a !== void 0 ? _a : 'Select a value';\r\n    }\r\n    get activeItem() {\r\n        const { value } = this;\r\n        const options = Array.from(this.el.querySelectorAll('ion-picker-column-option'));\r\n        return options.find((option) => {\r\n            /**\r\n             * If the whole picker column is disabled, the current value should appear active\r\n             * If the current value item is specifically disabled, it should not appear active\r\n             */\r\n            if (!this.disabled && option.disabled) {\r\n                return false;\r\n            }\r\n            return option.value === value;\r\n        });\r\n    }\r\n    render() {\r\n        const { color, disabled, isActive, numericInput } = this;\r\n        const mode = getIonMode(this);\r\n        return (h(Host, { key: 'ea0280355b2f87895bf7dddd289ccf473aa759f3', class: createColorClasses(color, {\r\n                [mode]: true,\r\n                ['picker-column-active']: isActive,\r\n                ['picker-column-numeric-input']: numericInput,\r\n                ['picker-column-disabled']: disabled,\r\n            }) }, this.renderAssistiveFocusable(), h(\"slot\", { key: '482992131cdeb85b1f61430d7fe1322a16345769', name: \"prefix\" }), h(\"div\", { key: '43f7f80d621d411ef366b3ca1396299e8c9a0c97', \"aria-hidden\": \"true\", class: \"picker-opts\", ref: (el) => {\r\n                this.scrollEl = el;\r\n            },\r\n            /**\r\n             * When an element has an overlay scroll style and\r\n             * a fixed height, Firefox will focus the scrollable\r\n             * container if the content exceeds the container's\r\n             * dimensions.\r\n             *\r\n             * This causes keyboard navigation to focus to this\r\n             * element instead of going to the next element in\r\n             * the tab order.\r\n             *\r\n             * The desired behavior is for the user to be able to\r\n             * focus the assistive focusable element and tab to\r\n             * the next element in the tab order. Instead of tabbing\r\n             * to this element.\r\n             *\r\n             * To prevent this, we set the tabIndex to -1. This\r\n             * will match the behavior of the other browsers.\r\n             */\r\n            tabIndex: -1 }, h(\"div\", { key: '13a9ee686132af32240710730765de4c0003a9e8', class: \"picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), h(\"div\", { key: 'dbccba4920833cfcebe9b0fc763458ec3053705a', class: \"picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), h(\"div\", { key: '682b43f83a5ea2e46067457f3af118535e111edb', class: \"picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), h(\"slot\", { key: 'd27e1e1dc0504b2f4627a29912a05bb91e8e413a' }), h(\"div\", { key: '61c948dbb9cf7469aed3018542bc0954211585ba', class: \"picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), h(\"div\", { key: 'cf46c277fbee65e35ff44ce0d53ce12aa9cbf9db', class: \"picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), h(\"div\", { key: 'bbc0e2d491d3f836ab849493ade2f7fa6ad9244e', class: \"picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\")), h(\"slot\", { key: 'd25cbbe14b2914fe7b878d43b4e3f4a8c8177d24', name: \"suffix\" })));\r\n    }\r\n    get el() { return getElement(this); }\r\n    static get watchers() { return {\r\n        \"aria-label\": [\"ariaLabelChanged\"],\r\n        \"value\": [\"valueChange\"]\r\n    }; }\r\n};\r\nconst PICKER_ITEM_ACTIVE_CLASS = 'option-active';\r\nPickerColumn.style = pickerColumnCss;\r\n\r\nexport { PickerColumn as ion_picker_column };\r\n"],
  "mappings": "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",
  "names": ["el"]
}
