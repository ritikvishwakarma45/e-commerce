{
  "version": 3,
  "sources": ["../../../../../../node_modules/@ionic/core/dist/esm/config-AaTyISnm.js"],
  "sourcesContent": ["/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\r\nimport { o as printIonError } from './index-B_U9CtaY.js';\r\n\r\n/**\r\n * Does a simple sanitization of all elements\r\n * in an untrusted string\r\n */\r\nconst sanitizeDOMString = (untrustedString) => {\r\n    try {\r\n        if (untrustedString instanceof IonicSafeString) {\r\n            return untrustedString.value;\r\n        }\r\n        if (!isSanitizerEnabled() || typeof untrustedString !== 'string' || untrustedString === '') {\r\n            return untrustedString;\r\n        }\r\n        /**\r\n         * onload is fired when appending to a document\r\n         * fragment in Chrome. If a string\r\n         * contains onload then we should not\r\n         * attempt to add this to the fragment.\r\n         */\r\n        if (untrustedString.includes('onload=')) {\r\n            return '';\r\n        }\r\n        /**\r\n         * Create a document fragment\r\n         * separate from the main DOM,\r\n         * create a div to do our work in\r\n         */\r\n        const documentFragment = document.createDocumentFragment();\r\n        const workingDiv = document.createElement('div');\r\n        documentFragment.appendChild(workingDiv);\r\n        workingDiv.innerHTML = untrustedString;\r\n        /**\r\n         * Remove any elements\r\n         * that are blocked\r\n         */\r\n        blockedTags.forEach((blockedTag) => {\r\n            const getElementsToRemove = documentFragment.querySelectorAll(blockedTag);\r\n            for (let elementIndex = getElementsToRemove.length - 1; elementIndex >= 0; elementIndex--) {\r\n                const element = getElementsToRemove[elementIndex];\r\n                if (element.parentNode) {\r\n                    element.parentNode.removeChild(element);\r\n                }\r\n                else {\r\n                    documentFragment.removeChild(element);\r\n                }\r\n                /**\r\n                 * We still need to sanitize\r\n                 * the children of this element\r\n                 * as they are left behind\r\n                 */\r\n                const childElements = getElementChildren(element);\r\n                /* eslint-disable-next-line */\r\n                for (let childIndex = 0; childIndex < childElements.length; childIndex++) {\r\n                    sanitizeElement(childElements[childIndex]);\r\n                }\r\n            }\r\n        });\r\n        /**\r\n         * Go through remaining elements and remove\r\n         * non-allowed attribs\r\n         */\r\n        // IE does not support .children on document fragments, only .childNodes\r\n        const dfChildren = getElementChildren(documentFragment);\r\n        /* eslint-disable-next-line */\r\n        for (let childIndex = 0; childIndex < dfChildren.length; childIndex++) {\r\n            sanitizeElement(dfChildren[childIndex]);\r\n        }\r\n        // Append document fragment to div\r\n        const fragmentDiv = document.createElement('div');\r\n        fragmentDiv.appendChild(documentFragment);\r\n        // First child is always the div we did our work in\r\n        const getInnerDiv = fragmentDiv.querySelector('div');\r\n        return getInnerDiv !== null ? getInnerDiv.innerHTML : fragmentDiv.innerHTML;\r\n    }\r\n    catch (err) {\r\n        printIonError('sanitizeDOMString', err);\r\n        return '';\r\n    }\r\n};\r\n/**\r\n * Clean up current element based on allowed attributes\r\n * and then recursively dig down into any child elements to\r\n * clean those up as well\r\n */\r\n// TODO(FW-2832): type (using Element triggers other type errors as well)\r\nconst sanitizeElement = (element) => {\r\n    // IE uses childNodes, so ignore nodes that are not elements\r\n    if (element.nodeType && element.nodeType !== 1) {\r\n        return;\r\n    }\r\n    /**\r\n     * If attributes is not a NamedNodeMap\r\n     * then we should remove the element entirely.\r\n     * This helps avoid DOM Clobbering attacks where\r\n     * attributes is overridden.\r\n     */\r\n    if (typeof NamedNodeMap !== 'undefined' && !(element.attributes instanceof NamedNodeMap)) {\r\n        element.remove();\r\n        return;\r\n    }\r\n    for (let i = element.attributes.length - 1; i >= 0; i--) {\r\n        const attribute = element.attributes.item(i);\r\n        const attributeName = attribute.name;\r\n        // remove non-allowed attribs\r\n        if (!allowedAttributes.includes(attributeName.toLowerCase())) {\r\n            element.removeAttribute(attributeName);\r\n            continue;\r\n        }\r\n        // clean up any allowed attribs\r\n        // that attempt to do any JS funny-business\r\n        const attributeValue = attribute.value;\r\n        /**\r\n         * We also need to check the property value\r\n         * as javascript: can allow special characters\r\n         * such as &Tab; and still be valid (i.e. java&Tab;script)\r\n         */\r\n        const propertyValue = element[attributeName];\r\n        /* eslint-disable */\r\n        if ((attributeValue != null && attributeValue.toLowerCase().includes('javascript:')) ||\r\n            (propertyValue != null && propertyValue.toLowerCase().includes('javascript:'))) {\r\n            element.removeAttribute(attributeName);\r\n        }\r\n        /* eslint-enable */\r\n    }\r\n    /**\r\n     * Sanitize any nested children\r\n     */\r\n    const childElements = getElementChildren(element);\r\n    /* eslint-disable-next-line */\r\n    for (let i = 0; i < childElements.length; i++) {\r\n        sanitizeElement(childElements[i]);\r\n    }\r\n};\r\n/**\r\n * IE doesn't always support .children\r\n * so we revert to .childNodes instead\r\n */\r\n// TODO(FW-2832): type\r\nconst getElementChildren = (el) => {\r\n    return el.children != null ? el.children : el.childNodes;\r\n};\r\nconst isSanitizerEnabled = () => {\r\n    var _a;\r\n    const win = window;\r\n    const config = (_a = win === null || win === void 0 ? void 0 : win.Ionic) === null || _a === void 0 ? void 0 : _a.config;\r\n    if (config) {\r\n        if (config.get) {\r\n            return config.get('sanitizerEnabled', true);\r\n        }\r\n        else {\r\n            return config.sanitizerEnabled === true || config.sanitizerEnabled === undefined;\r\n        }\r\n    }\r\n    return true;\r\n};\r\nconst allowedAttributes = ['class', 'id', 'href', 'src', 'name', 'slot'];\r\nconst blockedTags = ['script', 'style', 'iframe', 'meta', 'link', 'object', 'embed'];\r\nclass IonicSafeString {\r\n    constructor(value) {\r\n        this.value = value;\r\n    }\r\n}\r\n\r\nconst setupConfig = (config) => {\r\n    const win = window;\r\n    const Ionic = win.Ionic;\r\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\r\n    if (Ionic && Ionic.config && Ionic.config.constructor.name !== 'Object') {\r\n        return;\r\n    }\r\n    win.Ionic = win.Ionic || {};\r\n    win.Ionic.config = Object.assign(Object.assign({}, win.Ionic.config), config);\r\n    return win.Ionic.config;\r\n};\r\nconst getMode = () => {\r\n    var _a;\r\n    const win = window;\r\n    const config = (_a = win === null || win === void 0 ? void 0 : win.Ionic) === null || _a === void 0 ? void 0 : _a.config;\r\n    if (config) {\r\n        if (config.mode) {\r\n            return config.mode;\r\n        }\r\n        else {\r\n            return config.get('mode');\r\n        }\r\n    }\r\n    return 'md';\r\n};\r\nconst ENABLE_HTML_CONTENT_DEFAULT = false;\r\n\r\nexport { ENABLE_HTML_CONTENT_DEFAULT as E, IonicSafeString as I, sanitizeDOMString as a, getMode as g, setupConfig as s };\r\n"],
  "mappings": "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",
  "names": []
}
