{
  "version": 3,
  "sources": ["../../../../../../node_modules/@ionic/core/components/keyboard.js"],
  "sourcesContent": ["/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\r\nimport { K as Keyboard } from './keyboard2.js';\r\n\r\nconst KEYBOARD_DID_OPEN = 'ionKeyboardDidShow';\r\nconst KEYBOARD_DID_CLOSE = 'ionKeyboardDidHide';\r\nconst KEYBOARD_THRESHOLD = 150;\r\n// TODO(FW-2832): types\r\nlet previousVisualViewport = {};\r\nlet currentVisualViewport = {};\r\nlet keyboardOpen = false;\r\n/**\r\n * This is only used for tests\r\n */\r\nconst resetKeyboardAssist = () => {\r\n    previousVisualViewport = {};\r\n    currentVisualViewport = {};\r\n    keyboardOpen = false;\r\n};\r\nconst startKeyboardAssist = (win) => {\r\n    const nativeEngine = Keyboard.getEngine();\r\n    /**\r\n     * If the native keyboard plugin is available\r\n     * then we are running in a native environment. As a result\r\n     * we should only listen on the native events instead of\r\n     * using the Visual Viewport as the Ionic webview manipulates\r\n     * how it resizes such that the Visual Viewport API is not\r\n     * reliable here.\r\n     */\r\n    if (nativeEngine) {\r\n        startNativeListeners(win);\r\n    }\r\n    else {\r\n        if (!win.visualViewport) {\r\n            return;\r\n        }\r\n        currentVisualViewport = copyVisualViewport(win.visualViewport);\r\n        win.visualViewport.onresize = () => {\r\n            trackViewportChanges(win);\r\n            if (keyboardDidOpen() || keyboardDidResize(win)) {\r\n                setKeyboardOpen(win);\r\n            }\r\n            else if (keyboardDidClose(win)) {\r\n                setKeyboardClose(win);\r\n            }\r\n        };\r\n    }\r\n};\r\n/**\r\n * Listen for events fired by native keyboard plugin\r\n * in Capacitor/Cordova so devs only need to listen\r\n * in one place.\r\n */\r\nconst startNativeListeners = (win) => {\r\n    win.addEventListener('keyboardDidShow', (ev) => setKeyboardOpen(win, ev));\r\n    win.addEventListener('keyboardDidHide', () => setKeyboardClose(win));\r\n};\r\nconst setKeyboardOpen = (win, ev) => {\r\n    fireKeyboardOpenEvent(win, ev);\r\n    keyboardOpen = true;\r\n};\r\nconst setKeyboardClose = (win) => {\r\n    fireKeyboardCloseEvent(win);\r\n    keyboardOpen = false;\r\n};\r\n/**\r\n * Returns `true` if the `keyboardOpen` flag is not\r\n * set, the previous visual viewport width equal the current\r\n * visual viewport width, and if the scaled difference\r\n * of the previous visual viewport height minus the current\r\n * visual viewport height is greater than KEYBOARD_THRESHOLD\r\n *\r\n * We need to be able to accommodate users who have zooming\r\n * enabled in their browser (or have zoomed in manually) which\r\n * is why we take into account the current visual viewport's\r\n * scale value.\r\n */\r\nconst keyboardDidOpen = () => {\r\n    const scaledHeightDifference = (previousVisualViewport.height - currentVisualViewport.height) * currentVisualViewport.scale;\r\n    return (!keyboardOpen &&\r\n        previousVisualViewport.width === currentVisualViewport.width &&\r\n        scaledHeightDifference > KEYBOARD_THRESHOLD);\r\n};\r\n/**\r\n * Returns `true` if the keyboard is open,\r\n * but the keyboard did not close\r\n */\r\nconst keyboardDidResize = (win) => {\r\n    return keyboardOpen && !keyboardDidClose(win);\r\n};\r\n/**\r\n * Determine if the keyboard was closed\r\n * Returns `true` if the `keyboardOpen` flag is set and\r\n * the current visual viewport height equals the\r\n * layout viewport height.\r\n */\r\nconst keyboardDidClose = (win) => {\r\n    return keyboardOpen && currentVisualViewport.height === win.innerHeight;\r\n};\r\n/**\r\n * Dispatch a keyboard open event\r\n */\r\nconst fireKeyboardOpenEvent = (win, nativeEv) => {\r\n    const keyboardHeight = nativeEv ? nativeEv.keyboardHeight : win.innerHeight - currentVisualViewport.height;\r\n    const ev = new CustomEvent(KEYBOARD_DID_OPEN, {\r\n        detail: { keyboardHeight },\r\n    });\r\n    win.dispatchEvent(ev);\r\n};\r\n/**\r\n * Dispatch a keyboard close event\r\n */\r\nconst fireKeyboardCloseEvent = (win) => {\r\n    const ev = new CustomEvent(KEYBOARD_DID_CLOSE);\r\n    win.dispatchEvent(ev);\r\n};\r\n/**\r\n * Given a window object, create a copy of\r\n * the current visual and layout viewport states\r\n * while also preserving the previous visual and\r\n * layout viewport states\r\n */\r\nconst trackViewportChanges = (win) => {\r\n    previousVisualViewport = Object.assign({}, currentVisualViewport);\r\n    currentVisualViewport = copyVisualViewport(win.visualViewport);\r\n};\r\n/**\r\n * Creates a deep copy of the visual viewport\r\n * at a given state\r\n */\r\nconst copyVisualViewport = (visualViewport) => {\r\n    return {\r\n        width: Math.round(visualViewport.width),\r\n        height: Math.round(visualViewport.height),\r\n        offsetTop: visualViewport.offsetTop,\r\n        offsetLeft: visualViewport.offsetLeft,\r\n        pageTop: visualViewport.pageTop,\r\n        pageLeft: visualViewport.pageLeft,\r\n        scale: visualViewport.scale,\r\n    };\r\n};\r\n\r\nexport { KEYBOARD_DID_CLOSE, KEYBOARD_DID_OPEN, copyVisualViewport, keyboardDidClose, keyboardDidOpen, keyboardDidResize, resetKeyboardAssist, setKeyboardClose, setKeyboardOpen, startKeyboardAssist, trackViewportChanges };\r\n"],
  "mappings": ";;;;;AAKA,IAAM,oBAAoB;AAC1B,IAAM,qBAAqB;AAC3B,IAAM,qBAAqB;AAE3B,IAAI,yBAAyB,CAAC;AAC9B,IAAI,wBAAwB,CAAC;AAC7B,IAAI,eAAe;AAInB,IAAM,sBAAsB,MAAM;AAC9B,2BAAyB,CAAC;AAC1B,0BAAwB,CAAC;AACzB,iBAAe;AACnB;AACA,IAAM,sBAAsB,CAAC,QAAQ;AACjC,QAAM,eAAe,SAAS,UAAU;AASxC,MAAI,cAAc;AACd,yBAAqB,GAAG;AAAA,EAC5B,OACK;AACD,QAAI,CAAC,IAAI,gBAAgB;AACrB;AAAA,IACJ;AACA,4BAAwB,mBAAmB,IAAI,cAAc;AAC7D,QAAI,eAAe,WAAW,MAAM;AAChC,2BAAqB,GAAG;AACxB,UAAI,gBAAgB,KAAK,kBAAkB,GAAG,GAAG;AAC7C,wBAAgB,GAAG;AAAA,MACvB,WACS,iBAAiB,GAAG,GAAG;AAC5B,yBAAiB,GAAG;AAAA,MACxB;AAAA,IACJ;AAAA,EACJ;AACJ;AAMA,IAAM,uBAAuB,CAAC,QAAQ;AAClC,MAAI,iBAAiB,mBAAmB,CAAC,OAAO,gBAAgB,KAAK,EAAE,CAAC;AACxE,MAAI,iBAAiB,mBAAmB,MAAM,iBAAiB,GAAG,CAAC;AACvE;AACA,IAAM,kBAAkB,CAAC,KAAK,OAAO;AACjC,wBAAsB,KAAK,EAAE;AAC7B,iBAAe;AACnB;AACA,IAAM,mBAAmB,CAAC,QAAQ;AAC9B,yBAAuB,GAAG;AAC1B,iBAAe;AACnB;AAaA,IAAM,kBAAkB,MAAM;AAC1B,QAAM,0BAA0B,uBAAuB,SAAS,sBAAsB,UAAU,sBAAsB;AACtH,SAAQ,CAAC,gBACL,uBAAuB,UAAU,sBAAsB,SACvD,yBAAyB;AACjC;AAKA,IAAM,oBAAoB,CAAC,QAAQ;AAC/B,SAAO,gBAAgB,CAAC,iBAAiB,GAAG;AAChD;AAOA,IAAM,mBAAmB,CAAC,QAAQ;AAC9B,SAAO,gBAAgB,sBAAsB,WAAW,IAAI;AAChE;AAIA,IAAM,wBAAwB,CAAC,KAAK,aAAa;AAC7C,QAAM,iBAAiB,WAAW,SAAS,iBAAiB,IAAI,cAAc,sBAAsB;AACpG,QAAM,KAAK,IAAI,YAAY,mBAAmB;AAAA,IAC1C,QAAQ,EAAE,eAAe;AAAA,EAC7B,CAAC;AACD,MAAI,cAAc,EAAE;AACxB;AAIA,IAAM,yBAAyB,CAAC,QAAQ;AACpC,QAAM,KAAK,IAAI,YAAY,kBAAkB;AAC7C,MAAI,cAAc,EAAE;AACxB;AAOA,IAAM,uBAAuB,CAAC,QAAQ;AAClC,2BAAyB,OAAO,OAAO,CAAC,GAAG,qBAAqB;AAChE,0BAAwB,mBAAmB,IAAI,cAAc;AACjE;AAKA,IAAM,qBAAqB,CAAC,mBAAmB;AAC3C,SAAO;AAAA,IACH,OAAO,KAAK,MAAM,eAAe,KAAK;AAAA,IACtC,QAAQ,KAAK,MAAM,eAAe,MAAM;AAAA,IACxC,WAAW,eAAe;AAAA,IAC1B,YAAY,eAAe;AAAA,IAC3B,SAAS,eAAe;AAAA,IACxB,UAAU,eAAe;AAAA,IACzB,OAAO,eAAe;AAAA,EAC1B;AACJ;",
  "names": []
}
