{
  "version": 3,
  "sources": ["../../../../../../node_modules/@ionic/core/dist/esm/ion-picker-column-option.entry.js"],
  "sourcesContent": ["/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\r\nimport { r as registerInstance, e as getIonMode, h, j as Host, k as getElement } from './index-B_U9CtaY.js';\r\nimport { b as inheritAttributes } from './helpers-1O4D2b7y.js';\r\nimport { c as createColorClasses } from './theme-DiVJyqlX.js';\r\n\r\nconst pickerColumnOptionIosCss = \"button{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;width:100%;height:34px;border:0px;outline:none;background:transparent;color:inherit;font-family:var(--ion-font-family, inherit);font-size:inherit;line-height:34px;text-align:inherit;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;overflow:hidden}:host(.option-disabled){opacity:0.4}:host(.option-disabled) button{cursor:default}\";\r\n\r\nconst pickerColumnOptionMdCss = \"button{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;width:100%;height:34px;border:0px;outline:none;background:transparent;color:inherit;font-family:var(--ion-font-family, inherit);font-size:inherit;line-height:34px;text-align:inherit;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;overflow:hidden}:host(.option-disabled){opacity:0.4}:host(.option-disabled) button{cursor:default}:host(.option-active){color:var(--ion-color-base)}\";\r\n\r\nconst PickerColumnOption = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        /**\r\n         * We keep track of the parent picker column\r\n         * so we can update the value of it when\r\n         * clicking an enable option.\r\n         */\r\n        this.pickerColumn = null;\r\n        /**\r\n         * The aria-label of the option.\r\n         *\r\n         * If the value changes, then it will trigger a\r\n         * re-render of the picker since it's a @State variable.\r\n         * Otherwise, the `aria-label` attribute cannot be updated\r\n         * after the component is loaded.\r\n         */\r\n        this.ariaLabel = null;\r\n        /**\r\n         * If `true`, the user cannot interact with the picker column option.\r\n         */\r\n        this.disabled = false;\r\n        /**\r\n         * The color to use from your application's color palette.\r\n         * Default options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\r\n         * For more information on colors, see [theming](/docs/theming/basics).\r\n         */\r\n        this.color = 'primary';\r\n    }\r\n    /**\r\n     * The aria-label of the option has changed after the\r\n     * first render and needs to be updated within the component.\r\n     *\r\n     * @param ariaLbl The new aria-label value.\r\n     */\r\n    onAriaLabelChange(ariaLbl) {\r\n        this.ariaLabel = ariaLbl;\r\n    }\r\n    componentWillLoad() {\r\n        const inheritedAttributes = inheritAttributes(this.el, ['aria-label']);\r\n        /**\r\n         * The initial value of `aria-label` needs to be set for\r\n         * the first render.\r\n    \r\n         */\r\n        this.ariaLabel = inheritedAttributes['aria-label'] || null;\r\n    }\r\n    connectedCallback() {\r\n        this.pickerColumn = this.el.closest('ion-picker-column');\r\n    }\r\n    disconnectedCallback() {\r\n        this.pickerColumn = null;\r\n    }\r\n    /**\r\n     * The column options can load at any time\r\n     * so the options needs to tell the\r\n     * parent picker column when it is loaded\r\n     * so the picker column can ensure it is\r\n     * centered in the view.\r\n     *\r\n     * We intentionally run this for every\r\n     * option. If we only ran this from\r\n     * the selected option then if the newly\r\n     * loaded options were not selected then\r\n     * scrollActiveItemIntoView would not be called.\r\n     */\r\n    componentDidLoad() {\r\n        const { pickerColumn } = this;\r\n        if (pickerColumn !== null) {\r\n            pickerColumn.scrollActiveItemIntoView();\r\n        }\r\n    }\r\n    /**\r\n     * When an option is clicked, update the\r\n     * parent picker column value. This\r\n     * component will handle centering the option\r\n     * in the column view.\r\n     */\r\n    onClick() {\r\n        const { pickerColumn } = this;\r\n        if (pickerColumn !== null) {\r\n            pickerColumn.setValue(this.value);\r\n        }\r\n    }\r\n    render() {\r\n        const { color, disabled, ariaLabel } = this;\r\n        const mode = getIonMode(this);\r\n        return (h(Host, { key: 'f816729941aabcb31ddfdce3ffe2e2139030d715', class: createColorClasses(color, {\r\n                [mode]: true,\r\n                ['option-disabled']: disabled,\r\n            }) }, h(\"button\", { key: '48dff7833bb60fc8331cd353a0885e6affa683d1', tabindex: \"-1\", \"aria-label\": ariaLabel, disabled: disabled, onClick: () => this.onClick() }, h(\"slot\", { key: 'f9224d0e7b7aa6c05b29abfdcfe0f30ad6ee3141' }))));\r\n    }\r\n    get el() { return getElement(this); }\r\n    static get watchers() { return {\r\n        \"aria-label\": [\"onAriaLabelChange\"]\r\n    }; }\r\n};\r\nPickerColumnOption.style = {\r\n    ios: pickerColumnOptionIosCss,\r\n    md: pickerColumnOptionMdCss\r\n};\r\n\r\nexport { PickerColumnOption as ion_picker_column_option };\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;AAOA,IAAM,2BAA2B;AAEjC,IAAM,0BAA0B;AAEhC,IAAM,qBAAqB,MAAM;AAAA,EAC7B,YAAY,SAAS;AACjB,qBAAiB,MAAM,OAAO;AAM9B,SAAK,eAAe;AASpB,SAAK,YAAY;AAIjB,SAAK,WAAW;AAMhB,SAAK,QAAQ;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,kBAAkB,SAAS;AACvB,SAAK,YAAY;AAAA,EACrB;AAAA,EACA,oBAAoB;AAChB,UAAM,sBAAsB,kBAAkB,KAAK,IAAI,CAAC,YAAY,CAAC;AAMrE,SAAK,YAAY,oBAAoB,YAAY,KAAK;AAAA,EAC1D;AAAA,EACA,oBAAoB;AAChB,SAAK,eAAe,KAAK,GAAG,QAAQ,mBAAmB;AAAA,EAC3D;AAAA,EACA,uBAAuB;AACnB,SAAK,eAAe;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,mBAAmB;AACf,UAAM,EAAE,aAAa,IAAI;AACzB,QAAI,iBAAiB,MAAM;AACvB,mBAAa,yBAAyB;AAAA,IAC1C;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,UAAU;AACN,UAAM,EAAE,aAAa,IAAI;AACzB,QAAI,iBAAiB,MAAM;AACvB,mBAAa,SAAS,KAAK,KAAK;AAAA,IACpC;AAAA,EACJ;AAAA,EACA,SAAS;AACL,UAAM,EAAE,OAAO,UAAU,UAAU,IAAI;AACvC,UAAM,OAAO,WAAW,IAAI;AAC5B,WAAQ,EAAE,MAAM,EAAE,KAAK,4CAA4C,OAAO,mBAAmB,OAAO;AAAA,MAC5F,CAAC,IAAI,GAAG;AAAA,MACR,CAAC,iBAAiB,GAAG;AAAA,IACzB,CAAC,EAAE,GAAG,EAAE,UAAU,EAAE,KAAK,4CAA4C,UAAU,MAAM,cAAc,WAAW,UAAoB,SAAS,MAAM,KAAK,QAAQ,EAAE,GAAG,EAAE,QAAQ,EAAE,KAAK,2CAA2C,CAAC,CAAC,CAAC;AAAA,EAC1O;AAAA,EACA,IAAI,KAAK;AAAE,WAAO,WAAW,IAAI;AAAA,EAAG;AAAA,EACpC,WAAW,WAAW;AAAE,WAAO;AAAA,MAC3B,cAAc,CAAC,mBAAmB;AAAA,IACtC;AAAA,EAAG;AACP;AACA,mBAAmB,QAAQ;AAAA,EACvB,KAAK;AAAA,EACL,IAAI;AACR;",
  "names": []
}
