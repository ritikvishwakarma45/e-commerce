{
  "version": 3,
  "sources": ["../../../../../../node_modules/@ionic/core/dist/esm/keyboard-controller-BaaVITYt.js"],
  "sourcesContent": ["/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\r\nimport { w as win, d as doc } from './index-ZjP4CjeZ.js';\r\nimport { K as Keyboard, a as KeyboardResize } from './keyboard-CUw4ekVy.js';\r\n\r\n/**\r\n * The element that resizes when the keyboard opens\r\n * is going to depend on the resize mode\r\n * which is why we check that here.\r\n */\r\nconst getResizeContainer = (resizeMode) => {\r\n    /**\r\n     * If doc is undefined then we are\r\n     * in an SSR environment, so the keyboard\r\n     * adjustment does not apply.\r\n     * If the webview does not resize then there\r\n     * is no container to resize.\r\n     */\r\n    if (doc === undefined || resizeMode === KeyboardResize.None || resizeMode === undefined) {\r\n        return null;\r\n    }\r\n    /**\r\n     * The three remaining resize modes: Native, Ionic, and Body\r\n     * all cause `ion-app` to resize, so we can listen for changes\r\n     * on that. In the event `ion-app` is not available then\r\n     * we can fall back to `body`.\r\n     */\r\n    const ionApp = doc.querySelector('ion-app');\r\n    return ionApp !== null && ionApp !== void 0 ? ionApp : doc.body;\r\n};\r\n/**\r\n * Get the height of ion-app or body.\r\n * This is used for determining if the webview\r\n * has resized before the keyboard closed.\r\n * */\r\nconst getResizeContainerHeight = (resizeMode) => {\r\n    const containerElement = getResizeContainer(resizeMode);\r\n    return containerElement === null ? 0 : containerElement.clientHeight;\r\n};\r\n/**\r\n * Creates a controller that tracks and reacts to opening or closing the keyboard.\r\n *\r\n * @internal\r\n * @param keyboardChangeCallback A function to call when the keyboard opens or closes.\r\n */\r\nconst createKeyboardController = async (keyboardChangeCallback) => {\r\n    let keyboardWillShowHandler;\r\n    let keyboardWillHideHandler;\r\n    let keyboardVisible;\r\n    /**\r\n     * This lets us determine if the webview content\r\n     * has resized as a result of the keyboard.\r\n     */\r\n    let initialResizeContainerHeight;\r\n    const init = async () => {\r\n        const resizeOptions = await Keyboard.getResizeMode();\r\n        const resizeMode = resizeOptions === undefined ? undefined : resizeOptions.mode;\r\n        keyboardWillShowHandler = () => {\r\n            /**\r\n             * We need to compute initialResizeContainerHeight right before\r\n             * the keyboard opens to guarantee the resize container is visible.\r\n             * The resize container may not be visible if we compute this\r\n             * as soon as the keyboard controller is created.\r\n             * We should only need to do this once to avoid additional clientHeight\r\n             * computations.\r\n             */\r\n            if (initialResizeContainerHeight === undefined) {\r\n                initialResizeContainerHeight = getResizeContainerHeight(resizeMode);\r\n            }\r\n            keyboardVisible = true;\r\n            fireChangeCallback(keyboardVisible, resizeMode);\r\n        };\r\n        keyboardWillHideHandler = () => {\r\n            keyboardVisible = false;\r\n            fireChangeCallback(keyboardVisible, resizeMode);\r\n        };\r\n        win === null || win === void 0 ? void 0 : win.addEventListener('keyboardWillShow', keyboardWillShowHandler);\r\n        win === null || win === void 0 ? void 0 : win.addEventListener('keyboardWillHide', keyboardWillHideHandler);\r\n    };\r\n    const fireChangeCallback = (state, resizeMode) => {\r\n        if (keyboardChangeCallback) {\r\n            keyboardChangeCallback(state, createResizePromiseIfNeeded(resizeMode));\r\n        }\r\n    };\r\n    /**\r\n     * Code responding to keyboard lifecycles may need\r\n     * to show/hide content once the webview has\r\n     * resized as a result of the keyboard showing/hiding.\r\n     * createResizePromiseIfNeeded provides a way for code to wait for the\r\n     * resize event that was triggered as a result of the keyboard.\r\n     */\r\n    const createResizePromiseIfNeeded = (resizeMode) => {\r\n        if (\r\n        /**\r\n         * If we are in an SSR environment then there is\r\n         * no window to resize. Additionally, if there\r\n         * is no resize mode or the resize mode is \"None\"\r\n         * then initialResizeContainerHeight will be 0\r\n         */\r\n        initialResizeContainerHeight === 0 ||\r\n            /**\r\n             * If the keyboard is closed before the webview resizes initially\r\n             * then the webview will never resize.\r\n             */\r\n            initialResizeContainerHeight === getResizeContainerHeight(resizeMode)) {\r\n            return;\r\n        }\r\n        /**\r\n         * Get the resize container so we can\r\n         * attach the ResizeObserver below to\r\n         * the correct element.\r\n         */\r\n        const containerElement = getResizeContainer(resizeMode);\r\n        if (containerElement === null) {\r\n            return;\r\n        }\r\n        /**\r\n         * Some part of the web content should resize,\r\n         * and we need to listen for a resize.\r\n         */\r\n        return new Promise((resolve) => {\r\n            const callback = () => {\r\n                /**\r\n                 * As per the spec, the ResizeObserver\r\n                 * will fire when observation starts if\r\n                 * the observed element is rendered and does not\r\n                 * have a size of 0 x 0. However, the watched element\r\n                 * may or may not have resized by the time this first\r\n                 * callback is fired. As a result, we need to check\r\n                 * the dimensions of the element.\r\n                 *\r\n                 * https://www.w3.org/TR/resize-observer/#intro\r\n                 */\r\n                if (containerElement.clientHeight === initialResizeContainerHeight) {\r\n                    /**\r\n                     * The resize happened, so stop listening\r\n                     * for resize on this element.\r\n                     */\r\n                    ro.disconnect();\r\n                    resolve();\r\n                }\r\n            };\r\n            /**\r\n             * In Capacitor there can be delay between when the window\r\n             * resizes and when the container element resizes, so we cannot\r\n             * rely on a 'resize' event listener on the window.\r\n             * Instead, we need to determine when the container\r\n             * element resizes using a ResizeObserver.\r\n             */\r\n            const ro = new ResizeObserver(callback);\r\n            ro.observe(containerElement);\r\n        });\r\n    };\r\n    const destroy = () => {\r\n        win === null || win === void 0 ? void 0 : win.removeEventListener('keyboardWillShow', keyboardWillShowHandler);\r\n        win === null || win === void 0 ? void 0 : win.removeEventListener('keyboardWillHide', keyboardWillHideHandler);\r\n        keyboardWillShowHandler = keyboardWillHideHandler = undefined;\r\n    };\r\n    const isKeyboardVisible = () => keyboardVisible;\r\n    await init();\r\n    return { init, destroy, isKeyboardVisible };\r\n};\r\n\r\nexport { createKeyboardController as c };\r\n"],
  "mappings": ";;;;;;;;;;;;;AAWA,IAAM,qBAAqB,CAAC,eAAe;AAQvC,MAAI,QAAQ,UAAa,eAAe,eAAe,QAAQ,eAAe,QAAW;AACrF,WAAO;AAAA,EACX;AAOA,QAAM,SAAS,IAAI,cAAc,SAAS;AAC1C,SAAO,WAAW,QAAQ,WAAW,SAAS,SAAS,IAAI;AAC/D;AAMA,IAAM,2BAA2B,CAAC,eAAe;AAC7C,QAAM,mBAAmB,mBAAmB,UAAU;AACtD,SAAO,qBAAqB,OAAO,IAAI,iBAAiB;AAC5D;AAOA,IAAM,2BAA2B,CAAO,2BAA2B;AAC/D,MAAI;AACJ,MAAI;AACJ,MAAI;AAKJ,MAAI;AACJ,QAAM,OAAO,MAAY;AACrB,UAAM,gBAAgB,MAAM,SAAS,cAAc;AACnD,UAAM,aAAa,kBAAkB,SAAY,SAAY,cAAc;AAC3E,8BAA0B,MAAM;AAS5B,UAAI,iCAAiC,QAAW;AAC5C,uCAA+B,yBAAyB,UAAU;AAAA,MACtE;AACA,wBAAkB;AAClB,yBAAmB,iBAAiB,UAAU;AAAA,IAClD;AACA,8BAA0B,MAAM;AAC5B,wBAAkB;AAClB,yBAAmB,iBAAiB,UAAU;AAAA,IAClD;AACA,YAAQ,QAAQ,QAAQ,SAAS,SAAS,IAAI,iBAAiB,oBAAoB,uBAAuB;AAC1G,YAAQ,QAAQ,QAAQ,SAAS,SAAS,IAAI,iBAAiB,oBAAoB,uBAAuB;AAAA,EAC9G;AACA,QAAM,qBAAqB,CAAC,OAAO,eAAe;AAC9C,QAAI,wBAAwB;AACxB,6BAAuB,OAAO,4BAA4B,UAAU,CAAC;AAAA,IACzE;AAAA,EACJ;AAQA,QAAM,8BAA8B,CAAC,eAAe;AAChD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA,iCAAiC;AAAA;AAAA;AAAA;AAAA,MAK7B,iCAAiC,yBAAyB,UAAU;AAAA,MAAG;AACvE;AAAA,IACJ;AAMA,UAAM,mBAAmB,mBAAmB,UAAU;AACtD,QAAI,qBAAqB,MAAM;AAC3B;AAAA,IACJ;AAKA,WAAO,IAAI,QAAQ,CAAC,YAAY;AAC5B,YAAM,WAAW,MAAM;AAYnB,YAAI,iBAAiB,iBAAiB,8BAA8B;AAKhE,aAAG,WAAW;AACd,kBAAQ;AAAA,QACZ;AAAA,MACJ;AAQA,YAAM,KAAK,IAAI,eAAe,QAAQ;AACtC,SAAG,QAAQ,gBAAgB;AAAA,IAC/B,CAAC;AAAA,EACL;AACA,QAAM,UAAU,MAAM;AAClB,YAAQ,QAAQ,QAAQ,SAAS,SAAS,IAAI,oBAAoB,oBAAoB,uBAAuB;AAC7G,YAAQ,QAAQ,QAAQ,SAAS,SAAS,IAAI,oBAAoB,oBAAoB,uBAAuB;AAC7G,8BAA0B,0BAA0B;AAAA,EACxD;AACA,QAAM,oBAAoB,MAAM;AAChC,QAAM,KAAK;AACX,SAAO,EAAE,MAAM,SAAS,kBAAkB;AAC9C;",
  "names": []
}
