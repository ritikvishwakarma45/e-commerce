{
  "version": 3,
  "sources": ["../../../../../../node_modules/@ionic/core/dist/esm/ion-refresher_2.entry.js"],
  "sourcesContent": ["/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\r\nimport { w as writeTask, r as registerInstance, d as createEvent, e as getIonMode, f as readTask, o as printIonError, h, j as Host, k as getElement, l as config } from './index-B_U9CtaY.js';\r\nimport { g as getTimeGivenProgression } from './cubic-bezier-hHmYLOfE.js';\r\nimport { I as ION_CONTENT_CLASS_SELECTOR, b as ION_CONTENT_ELEMENT_SELECTOR, p as printIonContentErrorMsg, g as getScrollElement } from './index-BlJTBdxG.js';\r\nimport { c as componentOnReady, t as transitionEndAsync, e as clamp, g as getElementRoot, r as raf } from './helpers-1O4D2b7y.js';\r\nimport { d as hapticImpact, I as ImpactStyle } from './haptic-DzAMWJuk.js';\r\nimport { c as createAnimation } from './animation-BWcUKtbn.js';\r\nimport { E as ENABLE_HTML_CONTENT_DEFAULT, a as sanitizeDOMString } from './config-AaTyISnm.js';\r\nimport { h as arrowDown, i as caretBackSharp } from './index-BLV6ykCk.js';\r\nimport { S as SPINNERS } from './spinner-configs-D4RIp70E.js';\r\nimport './capacitor-CFERIeaU.js';\r\nimport './index-ZjP4CjeZ.js';\r\n\r\nconst getRefresherAnimationType = (contentEl) => {\r\n    const previousSibling = contentEl.previousElementSibling;\r\n    const hasHeader = previousSibling !== null && previousSibling.tagName === 'ION-HEADER';\r\n    return hasHeader ? 'translate' : 'scale';\r\n};\r\nconst createPullingAnimation = (type, pullingSpinner, refresherEl) => {\r\n    return type === 'scale'\r\n        ? createScaleAnimation(pullingSpinner, refresherEl)\r\n        : createTranslateAnimation(pullingSpinner, refresherEl);\r\n};\r\nconst createBaseAnimation = (pullingRefresherIcon) => {\r\n    const spinner = pullingRefresherIcon.querySelector('ion-spinner');\r\n    const circle = spinner.shadowRoot.querySelector('circle');\r\n    const spinnerArrowContainer = pullingRefresherIcon.querySelector('.spinner-arrow-container');\r\n    const arrowContainer = pullingRefresherIcon.querySelector('.arrow-container');\r\n    const arrow = arrowContainer ? arrowContainer.querySelector('ion-icon') : null;\r\n    const baseAnimation = createAnimation().duration(1000).easing('ease-out');\r\n    const spinnerArrowContainerAnimation = createAnimation()\r\n        .addElement(spinnerArrowContainer)\r\n        .keyframes([\r\n        { offset: 0, opacity: '0.3' },\r\n        { offset: 0.45, opacity: '0.3' },\r\n        { offset: 0.55, opacity: '1' },\r\n        { offset: 1, opacity: '1' },\r\n    ]);\r\n    const circleInnerAnimation = createAnimation()\r\n        .addElement(circle)\r\n        .keyframes([\r\n        { offset: 0, strokeDasharray: '1px, 200px' },\r\n        { offset: 0.2, strokeDasharray: '1px, 200px' },\r\n        { offset: 0.55, strokeDasharray: '100px, 200px' },\r\n        { offset: 1, strokeDasharray: '100px, 200px' },\r\n    ]);\r\n    const circleOuterAnimation = createAnimation()\r\n        .addElement(spinner)\r\n        .keyframes([\r\n        { offset: 0, transform: 'rotate(-90deg)' },\r\n        { offset: 1, transform: 'rotate(210deg)' },\r\n    ]);\r\n    /**\r\n     * Only add arrow animation if present\r\n     * this allows users to customize the spinners\r\n     * without errors being thrown\r\n     */\r\n    if (arrowContainer && arrow) {\r\n        const arrowContainerAnimation = createAnimation()\r\n            .addElement(arrowContainer)\r\n            .keyframes([\r\n            { offset: 0, transform: 'rotate(0deg)' },\r\n            { offset: 0.3, transform: 'rotate(0deg)' },\r\n            { offset: 0.55, transform: 'rotate(280deg)' },\r\n            { offset: 1, transform: 'rotate(400deg)' },\r\n        ]);\r\n        const arrowAnimation = createAnimation()\r\n            .addElement(arrow)\r\n            .keyframes([\r\n            { offset: 0, transform: 'translateX(2px) scale(0)' },\r\n            { offset: 0.3, transform: 'translateX(2px) scale(0)' },\r\n            { offset: 0.55, transform: 'translateX(-1.5px) scale(1)' },\r\n            { offset: 1, transform: 'translateX(-1.5px) scale(1)' },\r\n        ]);\r\n        baseAnimation.addAnimation([arrowContainerAnimation, arrowAnimation]);\r\n    }\r\n    return baseAnimation.addAnimation([spinnerArrowContainerAnimation, circleInnerAnimation, circleOuterAnimation]);\r\n};\r\nconst createScaleAnimation = (pullingRefresherIcon, refresherEl) => {\r\n    /**\r\n     * Do not take the height of the refresher icon\r\n     * because at this point the DOM has not updated,\r\n     * so the refresher icon is still hidden with\r\n     * display: none.\r\n     * The `ion-refresher` container height\r\n     * is roughly the amount we need to offset\r\n     * the icon by when pulling down.\r\n     */\r\n    const height = refresherEl.clientHeight;\r\n    const spinnerAnimation = createAnimation()\r\n        .addElement(pullingRefresherIcon)\r\n        .keyframes([\r\n        { offset: 0, transform: `scale(0) translateY(-${height}px)` },\r\n        { offset: 1, transform: 'scale(1) translateY(100px)' },\r\n    ]);\r\n    return createBaseAnimation(pullingRefresherIcon).addAnimation([spinnerAnimation]);\r\n};\r\nconst createTranslateAnimation = (pullingRefresherIcon, refresherEl) => {\r\n    /**\r\n     * Do not take the height of the refresher icon\r\n     * because at this point the DOM has not updated,\r\n     * so the refresher icon is still hidden with\r\n     * display: none.\r\n     * The `ion-refresher` container height\r\n     * is roughly the amount we need to offset\r\n     * the icon by when pulling down.\r\n     */\r\n    const height = refresherEl.clientHeight;\r\n    const spinnerAnimation = createAnimation()\r\n        .addElement(pullingRefresherIcon)\r\n        .keyframes([\r\n        { offset: 0, transform: `translateY(-${height}px)` },\r\n        { offset: 1, transform: 'translateY(100px)' },\r\n    ]);\r\n    return createBaseAnimation(pullingRefresherIcon).addAnimation([spinnerAnimation]);\r\n};\r\nconst createSnapBackAnimation = (pullingRefresherIcon) => {\r\n    return createAnimation()\r\n        .duration(125)\r\n        .addElement(pullingRefresherIcon)\r\n        .fromTo('transform', 'translateY(var(--ion-pulling-refresher-translate, 100px))', 'translateY(0px)');\r\n};\r\n// iOS Native Refresher\r\n// -----------------------------\r\nconst setSpinnerOpacity = (spinner, opacity) => {\r\n    spinner.style.setProperty('opacity', opacity.toString());\r\n};\r\nconst handleScrollWhilePulling = (ticks, numTicks, pullAmount) => {\r\n    const max = 1;\r\n    writeTask(() => {\r\n        ticks.forEach((el, i) => {\r\n            /**\r\n             * Compute the opacity of each tick\r\n             * mark as a percentage of the pullAmount\r\n             * offset by max / numTicks so\r\n             * the tick marks are shown staggered.\r\n             */\r\n            const min = i * (max / numTicks);\r\n            const range = max - min;\r\n            const start = pullAmount - min;\r\n            const progression = clamp(0, start / range, 1);\r\n            el.style.setProperty('opacity', progression.toString());\r\n        });\r\n    });\r\n};\r\nconst handleScrollWhileRefreshing = (spinner, lastVelocityY) => {\r\n    writeTask(() => {\r\n        // If user pulls down quickly, the spinner should spin faster\r\n        spinner.style.setProperty('--refreshing-rotation-duration', lastVelocityY >= 1.0 ? '0.5s' : '2s');\r\n        spinner.style.setProperty('opacity', '1');\r\n    });\r\n};\r\nconst translateElement = (el, value, duration = 200) => {\r\n    if (!el) {\r\n        return Promise.resolve();\r\n    }\r\n    const trans = transitionEndAsync(el, duration);\r\n    writeTask(() => {\r\n        el.style.setProperty('transition', `${duration}ms all ease-out`);\r\n        if (value === undefined) {\r\n            el.style.removeProperty('transform');\r\n        }\r\n        else {\r\n            el.style.setProperty('transform', `translate3d(0px, ${value}, 0px)`);\r\n        }\r\n    });\r\n    return trans;\r\n};\r\n// Utils\r\n// -----------------------------\r\n/**\r\n * In order to use the native iOS refresher the device must support rubber band scrolling.\r\n * As part of this, we need to exclude Desktop Safari because it has a slightly different rubber band effect that is not compatible with the native refresher in Ionic.\r\n *\r\n * We also need to be careful not to include devices that spoof their user agent.\r\n * For example, when using iOS emulation in Chrome the user agent will be spoofed such that\r\n * navigator.maxTouchPointer > 0. To work around this,\r\n * we check to see if the apple-pay-logo is supported as a named image which is only\r\n * true on Apple devices.\r\n *\r\n * We previously checked referencEl.style.webkitOverflowScrolling to explicitly check\r\n * for rubber band support. However, this property was removed on iPadOS and it's possible\r\n * that this will be removed on iOS in the future too.\r\n *\r\n */\r\nconst supportsRubberBandScrolling = () => {\r\n    return navigator.maxTouchPoints > 0 && CSS.supports('background: -webkit-named-image(apple-pay-logo-black)');\r\n};\r\nconst shouldUseNativeRefresher = async (referenceEl, mode) => {\r\n    const refresherContent = referenceEl.querySelector('ion-refresher-content');\r\n    if (!refresherContent) {\r\n        return Promise.resolve(false);\r\n    }\r\n    await new Promise((resolve) => componentOnReady(refresherContent, resolve));\r\n    const pullingSpinner = referenceEl.querySelector('ion-refresher-content .refresher-pulling ion-spinner');\r\n    const refreshingSpinner = referenceEl.querySelector('ion-refresher-content .refresher-refreshing ion-spinner');\r\n    return (pullingSpinner !== null &&\r\n        refreshingSpinner !== null &&\r\n        ((mode === 'ios' && supportsRubberBandScrolling()) || mode === 'md'));\r\n};\r\n\r\nconst refresherIosCss = \"ion-refresher{top:0;display:none;position:absolute;width:100%;height:60px;pointer-events:none;z-index:-1}ion-refresher{inset-inline-start:0}ion-refresher.refresher-active{display:block}ion-refresher-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;height:100%}.refresher-pulling,.refresher-refreshing{display:none;width:100%}.refresher-pulling-icon,.refresher-refreshing-icon{-webkit-transform-origin:center;transform-origin:center;-webkit-transition:200ms;transition:200ms;font-size:30px;text-align:center}:host-context([dir=rtl]) .refresher-pulling-icon,:host-context([dir=rtl]) .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}[dir=rtl] .refresher-pulling-icon,[dir=rtl] .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}@supports selector(:dir(rtl)){.refresher-pulling-icon:dir(rtl),.refresher-refreshing-icon:dir(rtl){-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}}.refresher-pulling-text,.refresher-refreshing-text{font-size:16px;text-align:center}ion-refresher-content .arrow-container{display:none}.refresher-pulling ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling-icon{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.refresher-refreshing ion-refresher-content .refresher-refreshing{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-completing ion-refresher-content .refresher-refreshing{display:block}.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-native .refresher-pulling-text,.refresher-native .refresher-refreshing-text{display:none}.refresher-ios .refresher-pulling-icon,.refresher-ios .refresher-refreshing-icon{color:var(--ion-text-color, #000)}.refresher-ios .refresher-pulling-text,.refresher-ios .refresher-refreshing-text{color:var(--ion-text-color, #000)}.refresher-ios .refresher-refreshing .spinner-lines-ios line,.refresher-ios .refresher-refreshing .spinner-lines-small-ios line,.refresher-ios .refresher-refreshing .spinner-crescent circle{stroke:var(--ion-text-color, #000)}.refresher-ios .refresher-refreshing .spinner-bubbles circle,.refresher-ios .refresher-refreshing .spinner-circles circle,.refresher-ios .refresher-refreshing .spinner-dots circle{fill:var(--ion-text-color, #000)}ion-refresher.refresher-native{display:block;z-index:1}ion-refresher.refresher-native ion-spinner{-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0}.refresher-native .refresher-refreshing ion-spinner{--refreshing-rotation-duration:2s;display:none;-webkit-animation:var(--refreshing-rotation-duration) ease-out refresher-rotate forwards;animation:var(--refreshing-rotation-duration) ease-out refresher-rotate forwards}.refresher-native .refresher-refreshing{display:none;-webkit-animation:250ms linear refresher-pop forwards;animation:250ms linear refresher-pop forwards}.refresher-native ion-spinner{width:32px;height:32px;color:var(--ion-color-step-450, var(--ion-background-color-step-450, #747577))}.refresher-native.refresher-refreshing .refresher-pulling ion-spinner,.refresher-native.refresher-completing .refresher-pulling ion-spinner{display:none}.refresher-native.refresher-refreshing .refresher-refreshing ion-spinner,.refresher-native.refresher-completing .refresher-refreshing ion-spinner{display:block}.refresher-native.refresher-pulling .refresher-pulling ion-spinner{display:block}.refresher-native.refresher-pulling .refresher-refreshing ion-spinner{display:none}.refresher-native.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0) rotate(180deg);transform:scale(0) rotate(180deg);-webkit-transition:300ms;transition:300ms}@-webkit-keyframes refresher-pop{0%{-webkit-transform:scale(1);transform:scale(1);-webkit-animation-timing-function:ease-in;animation-timing-function:ease-in}50%{-webkit-transform:scale(1.2);transform:scale(1.2);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}100%{-webkit-transform:scale(1);transform:scale(1)}}@keyframes refresher-pop{0%{-webkit-transform:scale(1);transform:scale(1);-webkit-animation-timing-function:ease-in;animation-timing-function:ease-in}50%{-webkit-transform:scale(1.2);transform:scale(1.2);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}100%{-webkit-transform:scale(1);transform:scale(1)}}@-webkit-keyframes refresher-rotate{from{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(180deg);transform:rotate(180deg)}}@keyframes refresher-rotate{from{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(180deg);transform:rotate(180deg)}}\";\r\n\r\nconst refresherMdCss = \"ion-refresher{top:0;display:none;position:absolute;width:100%;height:60px;pointer-events:none;z-index:-1}ion-refresher{inset-inline-start:0}ion-refresher.refresher-active{display:block}ion-refresher-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;height:100%}.refresher-pulling,.refresher-refreshing{display:none;width:100%}.refresher-pulling-icon,.refresher-refreshing-icon{-webkit-transform-origin:center;transform-origin:center;-webkit-transition:200ms;transition:200ms;font-size:30px;text-align:center}:host-context([dir=rtl]) .refresher-pulling-icon,:host-context([dir=rtl]) .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}[dir=rtl] .refresher-pulling-icon,[dir=rtl] .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}@supports selector(:dir(rtl)){.refresher-pulling-icon:dir(rtl),.refresher-refreshing-icon:dir(rtl){-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}}.refresher-pulling-text,.refresher-refreshing-text{font-size:16px;text-align:center}ion-refresher-content .arrow-container{display:none}.refresher-pulling ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling-icon{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.refresher-refreshing ion-refresher-content .refresher-refreshing{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-completing ion-refresher-content .refresher-refreshing{display:block}.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-native .refresher-pulling-text,.refresher-native .refresher-refreshing-text{display:none}.refresher-md .refresher-pulling-icon,.refresher-md .refresher-refreshing-icon{color:var(--ion-text-color, #000)}.refresher-md .refresher-pulling-text,.refresher-md .refresher-refreshing-text{color:var(--ion-text-color, #000)}.refresher-md .refresher-refreshing .spinner-lines-md line,.refresher-md .refresher-refreshing .spinner-lines-small-md line,.refresher-md .refresher-refreshing .spinner-crescent circle{stroke:var(--ion-text-color, #000)}.refresher-md .refresher-refreshing .spinner-bubbles circle,.refresher-md .refresher-refreshing .spinner-circles circle,.refresher-md .refresher-refreshing .spinner-dots circle{fill:var(--ion-text-color, #000)}ion-refresher.refresher-native{display:block;z-index:1}ion-refresher.refresher-native ion-spinner{-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0;width:24px;height:24px;color:var(--ion-color-primary, #0054e9)}ion-refresher.refresher-native .spinner-arrow-container{display:inherit}ion-refresher.refresher-native .arrow-container{display:block;position:absolute;width:24px;height:24px}ion-refresher.refresher-native .arrow-container ion-icon{-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0;left:0;right:0;bottom:-4px;position:absolute;color:var(--ion-color-primary, #0054e9);font-size:12px}ion-refresher.refresher-native.refresher-pulling ion-refresher-content .refresher-pulling,ion-refresher.refresher-native.refresher-ready ion-refresher-content .refresher-pulling{display:-ms-flexbox;display:flex}ion-refresher.refresher-native.refresher-refreshing ion-refresher-content .refresher-refreshing,ion-refresher.refresher-native.refresher-completing ion-refresher-content .refresher-refreshing,ion-refresher.refresher-native.refresher-cancelling ion-refresher-content .refresher-refreshing{display:-ms-flexbox;display:flex}ion-refresher.refresher-native .refresher-pulling-icon{-webkit-transform:translateY(calc(-100% - 10px));transform:translateY(calc(-100% - 10px))}ion-refresher.refresher-native .refresher-pulling-icon,ion-refresher.refresher-native .refresher-refreshing-icon{-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0;border-radius:100%;-webkit-padding-start:8px;padding-inline-start:8px;-webkit-padding-end:8px;padding-inline-end:8px;padding-top:8px;padding-bottom:8px;display:-ms-flexbox;display:flex;border:1px solid var(--ion-color-step-200, var(--ion-background-color-step-200, #ececec));background:var(--ion-color-step-250, var(--ion-background-color-step-250, #ffffff));-webkit-box-shadow:0px 1px 6px rgba(0, 0, 0, 0.1);box-shadow:0px 1px 6px rgba(0, 0, 0, 0.1)}\";\r\n\r\nconst Refresher = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        this.ionRefresh = createEvent(this, \"ionRefresh\", 7);\r\n        this.ionPull = createEvent(this, \"ionPull\", 7);\r\n        this.ionStart = createEvent(this, \"ionStart\", 7);\r\n        this.appliedStyles = false;\r\n        this.didStart = false;\r\n        this.progress = 0;\r\n        this.pointerDown = false;\r\n        this.needsCompletion = false;\r\n        this.didRefresh = false;\r\n        this.contentFullscreen = false;\r\n        this.lastVelocityY = 0;\r\n        this.animations = [];\r\n        this.nativeRefresher = false;\r\n        /**\r\n         * The current state which the refresher is in. The refresher's states include:\r\n         *\r\n         * - `inactive` - The refresher is not being pulled down or refreshing and is currently hidden.\r\n         * - `pulling` - The user is actively pulling down the refresher, but has not reached the point yet that if the user lets go, it'll refresh.\r\n         * - `cancelling` - The user pulled down the refresher and let go, but did not pull down far enough to kick off the `refreshing` state. After letting go, the refresher is in the `cancelling` state while it is closing, and will go back to the `inactive` state once closed.\r\n         * - `ready` - The user has pulled down the refresher far enough that if they let go, it'll begin the `refreshing` state.\r\n         * - `refreshing` - The refresher is actively waiting on the async operation to end. Once the refresh handler calls `complete()` it will begin the `completing` state.\r\n         * - `completing` - The `refreshing` state has finished and the refresher is in the way of closing itself. Once closed, the refresher will go back to the `inactive` state.\r\n         */\r\n        this.state = 1 /* RefresherState.Inactive */;\r\n        /**\r\n         * The minimum distance the user must pull down until the\r\n         * refresher will go into the `refreshing` state.\r\n         * Does not apply when the refresher content uses a spinner,\r\n         * enabling the native refresher.\r\n         */\r\n        this.pullMin = 60;\r\n        /**\r\n         * The maximum distance of the pull until the refresher\r\n         * will automatically go into the `refreshing` state.\r\n         * Defaults to the result of `pullMin + 60`.\r\n         * Does not apply when  the refresher content uses a spinner,\r\n         * enabling the native refresher.\r\n         */\r\n        this.pullMax = this.pullMin + 60;\r\n        /**\r\n         * Time it takes to close the refresher.\r\n         * Does not apply when the refresher content uses a spinner,\r\n         * enabling the native refresher.\r\n         */\r\n        this.closeDuration = '280ms';\r\n        /**\r\n         * Time it takes the refresher to snap back to the `refreshing` state.\r\n         * Does not apply when the refresher content uses a spinner,\r\n         * enabling the native refresher.\r\n         */\r\n        this.snapbackDuration = '280ms';\r\n        /**\r\n         * How much to multiply the pull speed by. To slow the pull animation down,\r\n         * pass a number less than `1`. To speed up the pull, pass a number greater\r\n         * than `1`. The default value is `1` which is equal to the speed of the cursor.\r\n         * If a negative value is passed in, the factor will be `1` instead.\r\n         *\r\n         * For example: If the value passed is `1.2` and the content is dragged by\r\n         * `10` pixels, instead of `10` pixels the content will be pulled by `12` pixels\r\n         * (an increase of 20 percent). If the value passed is `0.8`, the dragged amount\r\n         * will be `8` pixels, less than the amount the cursor has moved.\r\n         *\r\n         * Does not apply when the refresher content uses a spinner,\r\n         * enabling the native refresher.\r\n         */\r\n        this.pullFactor = 1;\r\n        /**\r\n         * If `true`, the refresher will be hidden.\r\n         */\r\n        this.disabled = false;\r\n    }\r\n    disabledChanged() {\r\n        if (this.gesture) {\r\n            this.gesture.enable(!this.disabled);\r\n        }\r\n    }\r\n    async checkNativeRefresher() {\r\n        const useNativeRefresher = await shouldUseNativeRefresher(this.el, getIonMode(this));\r\n        if (useNativeRefresher && !this.nativeRefresher) {\r\n            const contentEl = this.el.closest('ion-content');\r\n            this.setupNativeRefresher(contentEl);\r\n        }\r\n        else if (!useNativeRefresher) {\r\n            this.destroyNativeRefresher();\r\n        }\r\n    }\r\n    destroyNativeRefresher() {\r\n        if (this.scrollEl && this.scrollListenerCallback) {\r\n            this.scrollEl.removeEventListener('scroll', this.scrollListenerCallback);\r\n            this.scrollListenerCallback = undefined;\r\n        }\r\n        this.nativeRefresher = false;\r\n    }\r\n    async resetNativeRefresher(el, state) {\r\n        this.state = state;\r\n        if (getIonMode(this) === 'ios') {\r\n            await translateElement(el, undefined, 300);\r\n        }\r\n        else {\r\n            await transitionEndAsync(this.el.querySelector('.refresher-refreshing-icon'), 200);\r\n        }\r\n        this.didRefresh = false;\r\n        this.needsCompletion = false;\r\n        this.pointerDown = false;\r\n        this.animations.forEach((ani) => ani.destroy());\r\n        this.animations = [];\r\n        this.progress = 0;\r\n        this.state = 1 /* RefresherState.Inactive */;\r\n    }\r\n    async setupiOSNativeRefresher(pullingSpinner, refreshingSpinner) {\r\n        this.elementToTransform = this.scrollEl;\r\n        const ticks = pullingSpinner.shadowRoot.querySelectorAll('svg');\r\n        let MAX_PULL = this.scrollEl.clientHeight * 0.16;\r\n        const NUM_TICKS = ticks.length;\r\n        writeTask(() => ticks.forEach((el) => el.style.setProperty('animation', 'none')));\r\n        this.scrollListenerCallback = () => {\r\n            // If pointer is not on screen or refresher is not active, ignore scroll\r\n            if (!this.pointerDown && this.state === 1 /* RefresherState.Inactive */) {\r\n                return;\r\n            }\r\n            readTask(() => {\r\n                // PTR should only be active when overflow scrolling at the top\r\n                const scrollTop = this.scrollEl.scrollTop;\r\n                const refresherHeight = this.el.clientHeight;\r\n                if (scrollTop > 0) {\r\n                    /**\r\n                     * If refresher is refreshing and user tries to scroll\r\n                     * progressively fade refresher out/in\r\n                     */\r\n                    if (this.state === 8 /* RefresherState.Refreshing */) {\r\n                        const ratio = clamp(0, scrollTop / (refresherHeight * 0.5), 1);\r\n                        writeTask(() => setSpinnerOpacity(refreshingSpinner, 1 - ratio));\r\n                        return;\r\n                    }\r\n                    return;\r\n                }\r\n                if (this.pointerDown) {\r\n                    if (!this.didStart) {\r\n                        this.didStart = true;\r\n                        this.ionStart.emit();\r\n                    }\r\n                    // emit \"pulling\" on every move\r\n                    if (this.pointerDown) {\r\n                        this.ionPull.emit();\r\n                    }\r\n                }\r\n                /**\r\n                 * We want to delay the start of this gesture by ~30px\r\n                 * when initially pulling down so the refresher does not\r\n                 * overlap with the content. But when letting go of the\r\n                 * gesture before the refresher completes, we want the\r\n                 * refresher tick marks to quickly fade out.\r\n                 */\r\n                const offset = this.didStart ? 30 : 0;\r\n                const pullAmount = (this.progress = clamp(0, (Math.abs(scrollTop) - offset) / MAX_PULL, 1));\r\n                const shouldShowRefreshingSpinner = this.state === 8 /* RefresherState.Refreshing */ || pullAmount === 1;\r\n                if (shouldShowRefreshingSpinner) {\r\n                    if (this.pointerDown) {\r\n                        handleScrollWhileRefreshing(refreshingSpinner, this.lastVelocityY);\r\n                    }\r\n                    if (!this.didRefresh) {\r\n                        this.beginRefresh();\r\n                        this.didRefresh = true;\r\n                        hapticImpact({ style: ImpactStyle.Light });\r\n                        /**\r\n                         * Translate the content element otherwise when pointer is removed\r\n                         * from screen the scroll content will bounce back over the refresher\r\n                         */\r\n                        if (!this.pointerDown) {\r\n                            translateElement(this.elementToTransform, `${refresherHeight}px`);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.state = 2 /* RefresherState.Pulling */;\r\n                    handleScrollWhilePulling(ticks, NUM_TICKS, pullAmount);\r\n                }\r\n            });\r\n        };\r\n        this.scrollEl.addEventListener('scroll', this.scrollListenerCallback);\r\n        this.gesture = (await import('./index-CfgBF1SE.js')).createGesture({\r\n            el: this.scrollEl,\r\n            gestureName: 'refresher',\r\n            gesturePriority: 31,\r\n            direction: 'y',\r\n            threshold: 5,\r\n            onStart: () => {\r\n                this.pointerDown = true;\r\n                if (!this.didRefresh) {\r\n                    translateElement(this.elementToTransform, '0px');\r\n                }\r\n                /**\r\n                 * If the content had `display: none` when\r\n                 * the refresher was initialized, its clientHeight\r\n                 * will be 0. When the gesture starts, the content\r\n                 * will be visible, so try to get the correct\r\n                 * client height again. This is most common when\r\n                 * using the refresher in an ion-menu.\r\n                 */\r\n                if (MAX_PULL === 0) {\r\n                    MAX_PULL = this.scrollEl.clientHeight * 0.16;\r\n                }\r\n            },\r\n            onMove: (ev) => {\r\n                this.lastVelocityY = ev.velocityY;\r\n            },\r\n            onEnd: () => {\r\n                this.pointerDown = false;\r\n                this.didStart = false;\r\n                if (this.needsCompletion) {\r\n                    this.resetNativeRefresher(this.elementToTransform, 32 /* RefresherState.Completing */);\r\n                    this.needsCompletion = false;\r\n                }\r\n                else if (this.didRefresh) {\r\n                    readTask(() => translateElement(this.elementToTransform, `${this.el.clientHeight}px`));\r\n                }\r\n            },\r\n        });\r\n        this.disabledChanged();\r\n    }\r\n    async setupMDNativeRefresher(contentEl, pullingSpinner, refreshingSpinner) {\r\n        const circle = getElementRoot(pullingSpinner).querySelector('circle');\r\n        const pullingRefresherIcon = this.el.querySelector('ion-refresher-content .refresher-pulling-icon');\r\n        const refreshingCircle = getElementRoot(refreshingSpinner).querySelector('circle');\r\n        if (circle !== null && refreshingCircle !== null) {\r\n            writeTask(() => {\r\n                circle.style.setProperty('animation', 'none');\r\n                // This lines up the animation on the refreshing spinner with the pulling spinner\r\n                refreshingSpinner.style.setProperty('animation-delay', '-655ms');\r\n                refreshingCircle.style.setProperty('animation-delay', '-655ms');\r\n            });\r\n        }\r\n        this.gesture = (await import('./index-CfgBF1SE.js')).createGesture({\r\n            el: this.scrollEl,\r\n            gestureName: 'refresher',\r\n            gesturePriority: 31,\r\n            direction: 'y',\r\n            threshold: 5,\r\n            canStart: () => this.state !== 8 /* RefresherState.Refreshing */ &&\r\n                this.state !== 32 /* RefresherState.Completing */ &&\r\n                this.scrollEl.scrollTop === 0,\r\n            onStart: (ev) => {\r\n                this.progress = 0;\r\n                ev.data = { animation: undefined, didStart: false, cancelled: false };\r\n            },\r\n            onMove: (ev) => {\r\n                if ((ev.velocityY < 0 && this.progress === 0 && !ev.data.didStart) || ev.data.cancelled) {\r\n                    ev.data.cancelled = true;\r\n                    return;\r\n                }\r\n                if (!ev.data.didStart) {\r\n                    ev.data.didStart = true;\r\n                    this.state = 2 /* RefresherState.Pulling */;\r\n                    // When ion-refresher is being used with a custom scroll target, the overflow styles need to be applied directly instead of via a css variable\r\n                    const { scrollEl } = this;\r\n                    const overflowProperty = scrollEl.matches(ION_CONTENT_CLASS_SELECTOR) ? 'overflow' : '--overflow';\r\n                    writeTask(() => scrollEl.style.setProperty(overflowProperty, 'hidden'));\r\n                    const animationType = getRefresherAnimationType(contentEl);\r\n                    const animation = createPullingAnimation(animationType, pullingRefresherIcon, this.el);\r\n                    ev.data.animation = animation;\r\n                    animation.progressStart(false, 0);\r\n                    this.ionStart.emit();\r\n                    this.animations.push(animation);\r\n                    return;\r\n                }\r\n                // Since we are using an easing curve, slow the gesture tracking down a bit\r\n                this.progress = clamp(0, (ev.deltaY / 180) * 0.5, 1);\r\n                ev.data.animation.progressStep(this.progress);\r\n                this.ionPull.emit();\r\n            },\r\n            onEnd: (ev) => {\r\n                if (!ev.data.didStart) {\r\n                    return;\r\n                }\r\n                this.gesture.enable(false);\r\n                const { scrollEl } = this;\r\n                const overflowProperty = scrollEl.matches(ION_CONTENT_CLASS_SELECTOR) ? 'overflow' : '--overflow';\r\n                writeTask(() => scrollEl.style.removeProperty(overflowProperty));\r\n                if (this.progress <= 0.4) {\r\n                    ev.data.animation.progressEnd(0, this.progress, 500).onFinish(() => {\r\n                        this.animations.forEach((ani) => ani.destroy());\r\n                        this.animations = [];\r\n                        this.gesture.enable(true);\r\n                        this.state = 1 /* RefresherState.Inactive */;\r\n                    });\r\n                    return;\r\n                }\r\n                const progress = getTimeGivenProgression([0, 0], [0, 0], [1, 1], [1, 1], this.progress)[0];\r\n                const snapBackAnimation = createSnapBackAnimation(pullingRefresherIcon);\r\n                this.animations.push(snapBackAnimation);\r\n                writeTask(async () => {\r\n                    pullingRefresherIcon.style.setProperty('--ion-pulling-refresher-translate', `${progress * 100}px`);\r\n                    ev.data.animation.progressEnd();\r\n                    await snapBackAnimation.play();\r\n                    this.beginRefresh();\r\n                    ev.data.animation.destroy();\r\n                    this.gesture.enable(true);\r\n                });\r\n            },\r\n        });\r\n        this.disabledChanged();\r\n    }\r\n    async setupNativeRefresher(contentEl) {\r\n        if (this.scrollListenerCallback || !contentEl || this.nativeRefresher || !this.scrollEl) {\r\n            return;\r\n        }\r\n        /**\r\n         * If using non-native refresher before make sure\r\n         * we clean up any old CSS. This can happen when\r\n         * a user manually calls the refresh method in a\r\n         * component create callback before the native\r\n         * refresher is setup.\r\n         */\r\n        this.setCss(0, '', false, '');\r\n        this.nativeRefresher = true;\r\n        const pullingSpinner = this.el.querySelector('ion-refresher-content .refresher-pulling ion-spinner');\r\n        const refreshingSpinner = this.el.querySelector('ion-refresher-content .refresher-refreshing ion-spinner');\r\n        if (getIonMode(this) === 'ios') {\r\n            this.setupiOSNativeRefresher(pullingSpinner, refreshingSpinner);\r\n        }\r\n        else {\r\n            this.setupMDNativeRefresher(contentEl, pullingSpinner, refreshingSpinner);\r\n        }\r\n    }\r\n    componentDidUpdate() {\r\n        this.checkNativeRefresher();\r\n    }\r\n    async connectedCallback() {\r\n        if (this.el.getAttribute('slot') !== 'fixed') {\r\n            printIonError('[ion-refresher] - Make sure you use: <ion-refresher slot=\"fixed\">');\r\n            return;\r\n        }\r\n        const contentEl = this.el.closest(ION_CONTENT_ELEMENT_SELECTOR);\r\n        if (!contentEl) {\r\n            printIonContentErrorMsg(this.el);\r\n            return;\r\n        }\r\n        /**\r\n         * Waits for the content to be ready before querying the scroll\r\n         * or the background content element.\r\n         */\r\n        componentOnReady(contentEl, async () => {\r\n            const customScrollTarget = contentEl.querySelector(ION_CONTENT_CLASS_SELECTOR);\r\n            /**\r\n             * Query the custom scroll target (if available), first. In refresher implementations,\r\n             * the ion-refresher element will always be a direct child of ion-content (slot=\"fixed\"). By\r\n             * querying the custom scroll target first and falling back to the ion-content element,\r\n             * the correct scroll element will be returned by the implementation.\r\n             */\r\n            this.scrollEl = await getScrollElement(customScrollTarget !== null && customScrollTarget !== void 0 ? customScrollTarget : contentEl);\r\n            /**\r\n             * Query the background content element from the host ion-content element directly.\r\n             */\r\n            this.backgroundContentEl = await contentEl.getBackgroundElement();\r\n            /**\r\n             * Check if the content element is fullscreen to apply the correct styles\r\n             * when the refresher is refreshing. Otherwise, the refresher will be\r\n             * hidden because it is positioned behind the background content element.\r\n             */\r\n            this.contentFullscreen = contentEl.fullscreen;\r\n            if (await shouldUseNativeRefresher(this.el, getIonMode(this))) {\r\n                this.setupNativeRefresher(contentEl);\r\n            }\r\n            else {\r\n                this.gesture = (await import('./index-CfgBF1SE.js')).createGesture({\r\n                    el: contentEl,\r\n                    gestureName: 'refresher',\r\n                    gesturePriority: 31,\r\n                    direction: 'y',\r\n                    threshold: 20,\r\n                    passive: false,\r\n                    canStart: () => this.canStart(),\r\n                    onStart: () => this.onStart(),\r\n                    onMove: (ev) => this.onMove(ev),\r\n                    onEnd: () => this.onEnd(),\r\n                });\r\n                this.disabledChanged();\r\n            }\r\n        });\r\n    }\r\n    disconnectedCallback() {\r\n        this.destroyNativeRefresher();\r\n        this.scrollEl = undefined;\r\n        if (this.gesture) {\r\n            this.gesture.destroy();\r\n            this.gesture = undefined;\r\n        }\r\n    }\r\n    /**\r\n     * Call `complete()` when your async operation has completed.\r\n     * For example, the `refreshing` state is while the app is performing\r\n     * an asynchronous operation, such as receiving more data from an\r\n     * AJAX request. Once the data has been received, you then call this\r\n     * method to signify that the refreshing has completed and to close\r\n     * the refresher. This method also changes the refresher's state from\r\n     * `refreshing` to `completing`.\r\n     */\r\n    async complete() {\r\n        if (this.nativeRefresher) {\r\n            this.needsCompletion = true;\r\n            // Do not reset scroll el until user removes pointer from screen\r\n            if (!this.pointerDown) {\r\n                raf(() => raf(() => this.resetNativeRefresher(this.elementToTransform, 32 /* RefresherState.Completing */)));\r\n            }\r\n        }\r\n        else {\r\n            this.close(32 /* RefresherState.Completing */, '120ms');\r\n        }\r\n    }\r\n    /**\r\n     * Changes the refresher's state from `refreshing` to `cancelling`.\r\n     */\r\n    async cancel() {\r\n        if (this.nativeRefresher) {\r\n            // Do not reset scroll el until user removes pointer from screen\r\n            if (!this.pointerDown) {\r\n                raf(() => raf(() => this.resetNativeRefresher(this.elementToTransform, 16 /* RefresherState.Cancelling */)));\r\n            }\r\n        }\r\n        else {\r\n            this.close(16 /* RefresherState.Cancelling */, '');\r\n        }\r\n    }\r\n    /**\r\n     * A number representing how far down the user has pulled.\r\n     * The number `0` represents the user hasn't pulled down at all. The\r\n     * number `1`, and anything greater than `1`, represents that the user\r\n     * has pulled far enough down that when they let go then the refresh will\r\n     * happen. If they let go and the number is less than `1`, then the\r\n     * refresh will not happen, and the content will return to it's original\r\n     * position.\r\n     */\r\n    getProgress() {\r\n        return Promise.resolve(this.progress);\r\n    }\r\n    canStart() {\r\n        if (!this.scrollEl) {\r\n            return false;\r\n        }\r\n        if (this.state !== 1 /* RefresherState.Inactive */) {\r\n            return false;\r\n        }\r\n        // if the scrollTop is greater than zero then it's\r\n        // not possible to pull the content down yet\r\n        if (this.scrollEl.scrollTop > 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    onStart() {\r\n        this.progress = 0;\r\n        this.state = 1 /* RefresherState.Inactive */;\r\n        this.memoizeOverflowStyle();\r\n        /**\r\n         * If the content is fullscreen, then we need to\r\n         * set the offset-top style on the background content\r\n         * element to ensure that the refresher is shown.\r\n         */\r\n        if (this.contentFullscreen && this.backgroundContentEl) {\r\n            this.backgroundContentEl.style.setProperty('--offset-top', '0px');\r\n        }\r\n    }\r\n    onMove(detail) {\r\n        if (!this.scrollEl) {\r\n            return;\r\n        }\r\n        // this method can get called like a bazillion times per second,\r\n        // so it's built to be as efficient as possible, and does its\r\n        // best to do any DOM read/writes only when absolutely necessary\r\n        // if multi-touch then get out immediately\r\n        const ev = detail.event;\r\n        if (ev.touches !== undefined && ev.touches.length > 1) {\r\n            return;\r\n        }\r\n        // do nothing if it's actively refreshing\r\n        // or it's in the way of closing\r\n        // or this was never a startY\r\n        if ((this.state & 56 /* RefresherState._BUSY_ */) !== 0) {\r\n            return;\r\n        }\r\n        const pullFactor = Number.isNaN(this.pullFactor) || this.pullFactor < 0 ? 1 : this.pullFactor;\r\n        const deltaY = detail.deltaY * pullFactor;\r\n        // don't bother if they're scrolling up\r\n        // and have not already started dragging\r\n        if (deltaY <= 0) {\r\n            // the current Y is higher than the starting Y\r\n            // so they scrolled up enough to be ignored\r\n            this.progress = 0;\r\n            this.state = 1 /* RefresherState.Inactive */;\r\n            if (this.appliedStyles) {\r\n                // reset the styles only if they were applied\r\n                this.setCss(0, '', false, '');\r\n                return;\r\n            }\r\n            return;\r\n        }\r\n        if (this.state === 1 /* RefresherState.Inactive */) {\r\n            // this refresh is not already actively pulling down\r\n            // get the content's scrollTop\r\n            const scrollHostScrollTop = this.scrollEl.scrollTop;\r\n            // if the scrollTop is greater than zero then it's\r\n            // not possible to pull the content down yet\r\n            if (scrollHostScrollTop > 0) {\r\n                this.progress = 0;\r\n                return;\r\n            }\r\n            // content scrolled all the way to the top, and dragging down\r\n            this.state = 2 /* RefresherState.Pulling */;\r\n        }\r\n        // prevent native scroll events\r\n        if (ev.cancelable) {\r\n            ev.preventDefault();\r\n        }\r\n        // the refresher is actively pulling at this point\r\n        // move the scroll element within the content element\r\n        this.setCss(deltaY, '0ms', true, '');\r\n        if (deltaY === 0) {\r\n            // don't continue if there's no delta yet\r\n            this.progress = 0;\r\n            return;\r\n        }\r\n        const pullMin = this.pullMin;\r\n        // set pull progress\r\n        this.progress = deltaY / pullMin;\r\n        // emit \"start\" if it hasn't started yet\r\n        if (!this.didStart) {\r\n            this.didStart = true;\r\n            this.ionStart.emit();\r\n        }\r\n        // emit \"pulling\" on every move\r\n        this.ionPull.emit();\r\n        // do nothing if the delta is less than the pull threshold\r\n        if (deltaY < pullMin) {\r\n            // ensure it stays in the pulling state, cuz its not ready yet\r\n            this.state = 2 /* RefresherState.Pulling */;\r\n            return;\r\n        }\r\n        if (deltaY > this.pullMax) {\r\n            // they pulled farther than the max, so kick off the refresh\r\n            this.beginRefresh();\r\n            return;\r\n        }\r\n        // pulled farther than the pull min!!\r\n        // it is now in the `ready` state!!\r\n        // if they let go then it'll refresh, kerpow!!\r\n        this.state = 4 /* RefresherState.Ready */;\r\n        return;\r\n    }\r\n    onEnd() {\r\n        // only run in a zone when absolutely necessary\r\n        if (this.state === 4 /* RefresherState.Ready */) {\r\n            // they pulled down far enough, so it's ready to refresh\r\n            this.beginRefresh();\r\n        }\r\n        else if (this.state === 2 /* RefresherState.Pulling */) {\r\n            // they were pulling down, but didn't pull down far enough\r\n            // set the content back to it's original location\r\n            // and close the refresher\r\n            // set that the refresh is actively cancelling\r\n            this.cancel();\r\n        }\r\n        else if (this.state === 1 /* RefresherState.Inactive */) {\r\n            /**\r\n             * The pull to refresh gesture was aborted\r\n             * so we should immediately restore any overflow styles\r\n             * that have been modified. Do not call this.cancel\r\n             * because the styles will only be reset after a timeout.\r\n             * If the gesture is aborted then scrolling should be\r\n             * available right away.\r\n             */\r\n            this.restoreOverflowStyle();\r\n        }\r\n    }\r\n    beginRefresh() {\r\n        // assumes we're already back in a zone\r\n        // they pulled down far enough, so it's ready to refresh\r\n        this.state = 8 /* RefresherState.Refreshing */;\r\n        // place the content in a hangout position while it thinks\r\n        this.setCss(this.pullMin, this.snapbackDuration, true, '');\r\n        // emit \"refresh\" because it was pulled down far enough\r\n        // and they let go to begin refreshing\r\n        this.ionRefresh.emit({\r\n            complete: this.complete.bind(this),\r\n        });\r\n    }\r\n    close(state, delay) {\r\n        // create fallback timer incase something goes wrong with transitionEnd event\r\n        setTimeout(() => {\r\n            var _a;\r\n            this.state = 1 /* RefresherState.Inactive */;\r\n            this.progress = 0;\r\n            this.didStart = false;\r\n            /**\r\n             * Reset any overflow styles so the\r\n             * user can scroll again.\r\n             */\r\n            this.setCss(0, '0ms', false, '', true);\r\n            /**\r\n             * Reset the offset-top style on the background content\r\n             * when the refresher is no longer refreshing and the\r\n             * content is fullscreen.\r\n             *\r\n             * This ensures that the behavior of background content\r\n             * does not change when refreshing is complete.\r\n             */\r\n            if (this.contentFullscreen && this.backgroundContentEl) {\r\n                (_a = this.backgroundContentEl) === null || _a === void 0 ? void 0 : _a.style.removeProperty('--offset-top');\r\n            }\r\n        }, 600);\r\n        // reset the styles on the scroll element\r\n        // set that the refresh is actively cancelling/completing\r\n        this.state = state;\r\n        this.setCss(0, this.closeDuration, true, delay);\r\n    }\r\n    setCss(y, duration, overflowVisible, delay, shouldRestoreOverflowStyle = false) {\r\n        if (this.nativeRefresher) {\r\n            return;\r\n        }\r\n        this.appliedStyles = y > 0;\r\n        writeTask(() => {\r\n            if (this.scrollEl && this.backgroundContentEl) {\r\n                const scrollStyle = this.scrollEl.style;\r\n                const backgroundStyle = this.backgroundContentEl.style;\r\n                scrollStyle.transform = backgroundStyle.transform = y > 0 ? `translateY(${y}px) translateZ(0px)` : '';\r\n                scrollStyle.transitionDuration = backgroundStyle.transitionDuration = duration;\r\n                scrollStyle.transitionDelay = backgroundStyle.transitionDelay = delay;\r\n                scrollStyle.overflow = overflowVisible ? 'hidden' : '';\r\n            }\r\n            /**\r\n             * Reset the overflow styles only once\r\n             * the pull to refresh effect has been closed.\r\n             * This ensures that the gesture is done\r\n             * and the refresh operation has either\r\n             * been aborted or has completed.\r\n             */\r\n            if (shouldRestoreOverflowStyle) {\r\n                this.restoreOverflowStyle();\r\n            }\r\n        });\r\n    }\r\n    memoizeOverflowStyle() {\r\n        if (this.scrollEl) {\r\n            const { overflow, overflowX, overflowY } = this.scrollEl.style;\r\n            this.overflowStyles = {\r\n                overflow: overflow !== null && overflow !== void 0 ? overflow : '',\r\n                overflowX: overflowX !== null && overflowX !== void 0 ? overflowX : '',\r\n                overflowY: overflowY !== null && overflowY !== void 0 ? overflowY : '',\r\n            };\r\n        }\r\n    }\r\n    restoreOverflowStyle() {\r\n        if (this.overflowStyles !== undefined && this.scrollEl !== undefined) {\r\n            const { overflow, overflowX, overflowY } = this.overflowStyles;\r\n            this.scrollEl.style.overflow = overflow;\r\n            this.scrollEl.style.overflowX = overflowX;\r\n            this.scrollEl.style.overflowY = overflowY;\r\n            this.overflowStyles = undefined;\r\n        }\r\n    }\r\n    render() {\r\n        const mode = getIonMode(this);\r\n        return (h(Host, { key: '8c7a5cc32da02a9cbeaa954258148683f60a6d1b', slot: \"fixed\", class: {\r\n                [mode]: true,\r\n                // Used internally for styling\r\n                [`refresher-${mode}`]: true,\r\n                'refresher-native': this.nativeRefresher,\r\n                'refresher-active': this.state !== 1 /* RefresherState.Inactive */,\r\n                'refresher-pulling': this.state === 2 /* RefresherState.Pulling */,\r\n                'refresher-ready': this.state === 4 /* RefresherState.Ready */,\r\n                'refresher-refreshing': this.state === 8 /* RefresherState.Refreshing */,\r\n                'refresher-cancelling': this.state === 16 /* RefresherState.Cancelling */,\r\n                'refresher-completing': this.state === 32 /* RefresherState.Completing */,\r\n            } }));\r\n    }\r\n    get el() { return getElement(this); }\r\n    static get watchers() { return {\r\n        \"disabled\": [\"disabledChanged\"]\r\n    }; }\r\n};\r\nRefresher.style = {\r\n    ios: refresherIosCss,\r\n    md: refresherMdCss\r\n};\r\n\r\nconst RefresherContent = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        this.customHTMLEnabled = config.get('innerHTMLTemplatesEnabled', ENABLE_HTML_CONTENT_DEFAULT);\r\n    }\r\n    componentWillLoad() {\r\n        if (this.pullingIcon === undefined) {\r\n            /**\r\n             * The native iOS refresher uses a spinner instead of\r\n             * an icon, so we need to see if this device supports\r\n             * the native iOS refresher.\r\n             */\r\n            const hasRubberBandScrolling = supportsRubberBandScrolling();\r\n            const mode = getIonMode(this);\r\n            const overflowRefresher = hasRubberBandScrolling ? 'lines' : arrowDown;\r\n            this.pullingIcon = config.get('refreshingIcon', mode === 'ios' && hasRubberBandScrolling ? config.get('spinner', overflowRefresher) : 'circular');\r\n        }\r\n        if (this.refreshingSpinner === undefined) {\r\n            const mode = getIonMode(this);\r\n            this.refreshingSpinner = config.get('refreshingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'circular'));\r\n        }\r\n    }\r\n    renderPullingText() {\r\n        const { customHTMLEnabled, pullingText } = this;\r\n        if (customHTMLEnabled) {\r\n            return h(\"div\", { class: \"refresher-pulling-text\", innerHTML: sanitizeDOMString(pullingText) });\r\n        }\r\n        return h(\"div\", { class: \"refresher-pulling-text\" }, pullingText);\r\n    }\r\n    renderRefreshingText() {\r\n        const { customHTMLEnabled, refreshingText } = this;\r\n        if (customHTMLEnabled) {\r\n            return h(\"div\", { class: \"refresher-refreshing-text\", innerHTML: sanitizeDOMString(refreshingText) });\r\n        }\r\n        return h(\"div\", { class: \"refresher-refreshing-text\" }, refreshingText);\r\n    }\r\n    render() {\r\n        const pullingIcon = this.pullingIcon;\r\n        const hasSpinner = pullingIcon != null && SPINNERS[pullingIcon] !== undefined;\r\n        const mode = getIonMode(this);\r\n        return (h(Host, { key: 'e235f8a9a84070ece2e2066ced234a64663bfa1d', class: mode }, h(\"div\", { key: '9121691818ddaa35801a5f442e144ac27686cf19', class: \"refresher-pulling\" }, this.pullingIcon && hasSpinner && (h(\"div\", { key: 'c8d65d740f1575041bd3b752c789077927397fe4', class: \"refresher-pulling-icon\" }, h(\"div\", { key: '309dd904977eaa788b09ea95b7fa4996a73bec5b', class: \"spinner-arrow-container\" }, h(\"ion-spinner\", { key: 'a2a1480f67775d56ca7822e76be1e9f983bca2f9', name: this.pullingIcon, paused: true }), mode === 'md' && this.pullingIcon === 'circular' && (h(\"div\", { key: '811d7e06d324bf4b6a18a31427a43e5177f3ae3a', class: \"arrow-container\" }, h(\"ion-icon\", { key: '86cc48e2e8dc054ff6ff1299094da35b524be63d', icon: caretBackSharp, \"aria-hidden\": \"true\" })))))), this.pullingIcon && !hasSpinner && (h(\"div\", { key: '464ae097dbc95c18a2dd7dfd03f8489153dab719', class: \"refresher-pulling-icon\" }, h(\"ion-icon\", { key: 'ed6875978b9035add562caa743a68353743d978f', icon: this.pullingIcon, lazy: false, \"aria-hidden\": \"true\" }))), this.pullingText !== undefined && this.renderPullingText()), h(\"div\", { key: 'aff891924e44354543fec484e5cde1ca92e69904', class: \"refresher-refreshing\" }, this.refreshingSpinner && (h(\"div\", { key: '842d7ac4ff10a1058775493d62f31cbdcd34f7a0', class: \"refresher-refreshing-icon\" }, h(\"ion-spinner\", { key: '8c3e6195501e7e78d5cde1e3ad1fef90fd4a953f', name: this.refreshingSpinner }))), this.refreshingText !== undefined && this.renderRefreshingText())));\r\n    }\r\n    get el() { return getElement(this); }\r\n};\r\n\r\nexport { Refresher as ion_refresher, RefresherContent as ion_refresher_content };\r\n"],
  "mappings": "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",
  "names": []
}
