{
  "version": 3,
  "sources": ["../../../../../../node_modules/@ionic/core/components/input-shims.js"],
  "sourcesContent": ["/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\r\nimport { w as win, d as doc } from './index9.js';\r\nimport { g as getScrollElement, c as scrollByPoint, a as findClosestIonContent } from './index8.js';\r\nimport { a as addEventListener, b as removeEventListener, r as raf, c as componentOnReady } from './helpers.js';\r\nimport { a as KeyboardResize, K as Keyboard } from './keyboard2.js';\r\n\r\nconst cloneMap = new WeakMap();\r\nconst relocateInput = (componentEl, inputEl, shouldRelocate, inputRelativeY = 0, disabledClonedInput = false) => {\r\n    if (cloneMap.has(componentEl) === shouldRelocate) {\r\n        return;\r\n    }\r\n    if (shouldRelocate) {\r\n        addClone(componentEl, inputEl, inputRelativeY, disabledClonedInput);\r\n    }\r\n    else {\r\n        removeClone(componentEl, inputEl);\r\n    }\r\n};\r\nconst isFocused = (input) => {\r\n    /**\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/Node/getRootNode\r\n     * Calling getRootNode on an element in standard web page will return HTMLDocument.\r\n     * Calling getRootNode on an element inside of the Shadow DOM will return the associated ShadowRoot.\r\n     * Calling getRootNode on an element that is not attached to a document/shadow tree will return\r\n     * the root of the DOM tree it belongs to.\r\n     * isFocused is used for the hide-caret utility which only considers input/textarea elements\r\n     * that are present in the DOM, so we don't set types for that final case since it does not apply.\r\n     */\r\n    return input === input.getRootNode().activeElement;\r\n};\r\nconst addClone = (componentEl, inputEl, inputRelativeY, disabledClonedInput = false) => {\r\n    // this allows for the actual input to receive the focus from\r\n    // the user's touch event, but before it receives focus, it\r\n    // moves the actual input to a location that will not screw\r\n    // up the app's layout, and does not allow the native browser\r\n    // to attempt to scroll the input into place (messing up headers/footers)\r\n    // the cloned input fills the area of where native input should be\r\n    // while the native input fakes out the browser by relocating itself\r\n    // before it receives the actual focus event\r\n    // We hide the focused input (with the visible caret) invisible by making it scale(0),\r\n    const parentEl = inputEl.parentNode;\r\n    // DOM WRITES\r\n    const clonedEl = inputEl.cloneNode(false);\r\n    clonedEl.classList.add('cloned-input');\r\n    clonedEl.tabIndex = -1;\r\n    /**\r\n     * Making the cloned input disabled prevents\r\n     * Chrome for Android from still scrolling\r\n     * the entire page since this cloned input\r\n     * will briefly be hidden by the keyboard\r\n     * even though it is not focused.\r\n     *\r\n     * This is not needed on iOS. While this\r\n     * does not cause functional issues on iOS,\r\n     * the input still appears slightly dimmed even\r\n     * if we set opacity: 1.\r\n     */\r\n    if (disabledClonedInput) {\r\n        clonedEl.disabled = true;\r\n    }\r\n    parentEl.appendChild(clonedEl);\r\n    cloneMap.set(componentEl, clonedEl);\r\n    const doc = componentEl.ownerDocument;\r\n    const tx = doc.dir === 'rtl' ? 9999 : -9999;\r\n    componentEl.style.pointerEvents = 'none';\r\n    inputEl.style.transform = `translate3d(${tx}px,${inputRelativeY}px,0) scale(0)`;\r\n};\r\nconst removeClone = (componentEl, inputEl) => {\r\n    const clone = cloneMap.get(componentEl);\r\n    if (clone) {\r\n        cloneMap.delete(componentEl);\r\n        clone.remove();\r\n    }\r\n    componentEl.style.pointerEvents = '';\r\n    inputEl.style.transform = '';\r\n};\r\n/**\r\n * Factoring in 50px gives us some room\r\n * in case the keyboard shows password/autofill bars\r\n * asynchronously.\r\n */\r\nconst SCROLL_AMOUNT_PADDING = 50;\r\n\r\nconst enableHideCaretOnScroll = (componentEl, inputEl, scrollEl) => {\r\n    if (!scrollEl || !inputEl) {\r\n        return () => {\r\n            return;\r\n        };\r\n    }\r\n    const scrollHideCaret = (shouldHideCaret) => {\r\n        if (isFocused(inputEl)) {\r\n            relocateInput(componentEl, inputEl, shouldHideCaret);\r\n        }\r\n    };\r\n    const onBlur = () => relocateInput(componentEl, inputEl, false);\r\n    const hideCaret = () => scrollHideCaret(true);\r\n    const showCaret = () => scrollHideCaret(false);\r\n    addEventListener(scrollEl, 'ionScrollStart', hideCaret);\r\n    addEventListener(scrollEl, 'ionScrollEnd', showCaret);\r\n    inputEl.addEventListener('blur', onBlur);\r\n    return () => {\r\n        removeEventListener(scrollEl, 'ionScrollStart', hideCaret);\r\n        removeEventListener(scrollEl, 'ionScrollEnd', showCaret);\r\n        inputEl.removeEventListener('blur', onBlur);\r\n    };\r\n};\r\n\r\nconst SKIP_SELECTOR = 'input, textarea, [no-blur], [contenteditable]';\r\nconst enableInputBlurring = () => {\r\n    let focused = true;\r\n    let didScroll = false;\r\n    const doc = document;\r\n    const onScroll = () => {\r\n        didScroll = true;\r\n    };\r\n    const onFocusin = () => {\r\n        focused = true;\r\n    };\r\n    const onTouchend = (ev) => {\r\n        // if app did scroll return early\r\n        if (didScroll) {\r\n            didScroll = false;\r\n            return;\r\n        }\r\n        const active = doc.activeElement;\r\n        if (!active) {\r\n            return;\r\n        }\r\n        // only blur if the active element is a text-input or a textarea\r\n        if (active.matches(SKIP_SELECTOR)) {\r\n            return;\r\n        }\r\n        // if the selected target is the active element, do not blur\r\n        const tapped = ev.target;\r\n        if (tapped === active) {\r\n            return;\r\n        }\r\n        if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\r\n            return;\r\n        }\r\n        focused = false;\r\n        // TODO FW-2796: find a better way, why 50ms?\r\n        setTimeout(() => {\r\n            if (!focused) {\r\n                active.blur();\r\n            }\r\n        }, 50);\r\n    };\r\n    addEventListener(doc, 'ionScrollStart', onScroll);\r\n    doc.addEventListener('focusin', onFocusin, true);\r\n    doc.addEventListener('touchend', onTouchend, false);\r\n    return () => {\r\n        removeEventListener(doc, 'ionScrollStart', onScroll, true);\r\n        doc.removeEventListener('focusin', onFocusin, true);\r\n        doc.removeEventListener('touchend', onTouchend, false);\r\n    };\r\n};\r\n\r\nconst SCROLL_ASSIST_SPEED = 0.3;\r\nconst getScrollData = (componentEl, contentEl, keyboardHeight, platformHeight) => {\r\n    var _a;\r\n    const itemEl = (_a = componentEl.closest('ion-item,[ion-item]')) !== null && _a !== void 0 ? _a : componentEl;\r\n    return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, platformHeight);\r\n};\r\nconst calcScrollData = (inputRect, contentRect, keyboardHeight, platformHeight) => {\r\n    // compute input's Y values relative to the body\r\n    const inputTop = inputRect.top;\r\n    const inputBottom = inputRect.bottom;\r\n    // compute visible area\r\n    const visibleAreaTop = contentRect.top;\r\n    const visibleAreaBottom = Math.min(contentRect.bottom, platformHeight - keyboardHeight);\r\n    // compute safe area\r\n    const safeAreaTop = visibleAreaTop + 15;\r\n    const safeAreaBottom = visibleAreaBottom - SCROLL_AMOUNT_PADDING;\r\n    // figure out if each edge of the input is within the safe area\r\n    const distanceToBottom = safeAreaBottom - inputBottom;\r\n    const distanceToTop = safeAreaTop - inputTop;\r\n    // desiredScrollAmount is the negated distance to the safe area according to our calculations.\r\n    const desiredScrollAmount = Math.round(distanceToBottom < 0 ? -distanceToBottom : distanceToTop > 0 ? -distanceToTop : 0);\r\n    // our calculations make some assumptions that aren't always true, like the keyboard being closed when an input\r\n    // gets focus, so make sure we don't scroll the input above the visible area\r\n    const scrollAmount = Math.min(desiredScrollAmount, inputTop - visibleAreaTop);\r\n    const distance = Math.abs(scrollAmount);\r\n    const duration = distance / SCROLL_ASSIST_SPEED;\r\n    const scrollDuration = Math.min(400, Math.max(150, duration));\r\n    return {\r\n        scrollAmount,\r\n        scrollDuration,\r\n        scrollPadding: keyboardHeight,\r\n        inputSafeY: -(inputTop - safeAreaTop) + 4,\r\n    };\r\n};\r\n\r\nconst PADDING_TIMER_KEY = '$ionPaddingTimer';\r\n/**\r\n * Scroll padding adds additional padding to the bottom\r\n * of ion-content so that there is enough scroll space\r\n * for an input to be scrolled above the keyboard. This\r\n * is needed in environments where the webview does not\r\n * resize when the keyboard opens.\r\n *\r\n * Example: If an input at the bottom of ion-content is\r\n * focused, there is no additional scrolling space below\r\n * it, so the input cannot be scrolled above the keyboard.\r\n * Scroll padding fixes this by adding padding equal to the\r\n * height of the keyboard to the bottom of the content.\r\n *\r\n * Common environments where this is needed:\r\n * - Mobile Safari: The keyboard overlays the content\r\n * - Capacitor/Cordova on iOS: The keyboard overlays the content\r\n * when the KeyboardResize mode is set to 'none'.\r\n */\r\nconst setScrollPadding = (contentEl, paddingAmount, clearCallback) => {\r\n    const timer = contentEl[PADDING_TIMER_KEY];\r\n    if (timer) {\r\n        clearTimeout(timer);\r\n    }\r\n    if (paddingAmount > 0) {\r\n        contentEl.style.setProperty('--keyboard-offset', `${paddingAmount}px`);\r\n    }\r\n    else {\r\n        contentEl[PADDING_TIMER_KEY] = setTimeout(() => {\r\n            contentEl.style.setProperty('--keyboard-offset', '0px');\r\n            if (clearCallback) {\r\n                clearCallback();\r\n            }\r\n        }, 120);\r\n    }\r\n};\r\n/**\r\n * When an input is about to be focused,\r\n * set a timeout to clear any scroll padding\r\n * on the content. Note: The clearing\r\n * is done on a timeout so that if users\r\n * are moving focus from one input to the next\r\n * then re-adding scroll padding to the new\r\n * input with cancel the timeout to clear the\r\n * scroll padding.\r\n */\r\nconst setClearScrollPaddingListener = (inputEl, contentEl, doneCallback) => {\r\n    const clearScrollPadding = () => {\r\n        if (contentEl) {\r\n            setScrollPadding(contentEl, 0, doneCallback);\r\n        }\r\n    };\r\n    inputEl.addEventListener('focusout', clearScrollPadding, { once: true });\r\n};\r\n\r\nlet currentPadding = 0;\r\nconst SKIP_SCROLL_ASSIST = 'data-ionic-skip-scroll-assist';\r\nconst enableScrollAssist = (componentEl, inputEl, contentEl, footerEl, keyboardHeight, enableScrollPadding, keyboardResize, disableClonedInput = false) => {\r\n    /**\r\n     * Scroll padding should only be added if:\r\n     * 1. The global scrollPadding config option\r\n     * is set to true.\r\n     * 2. The native keyboard resize mode is either \"none\"\r\n     * (keyboard overlays webview) or undefined (resize\r\n     * information unavailable)\r\n     * Resize info is available on Capacitor 4+\r\n     */\r\n    const addScrollPadding = enableScrollPadding && (keyboardResize === undefined || keyboardResize.mode === KeyboardResize.None);\r\n    /**\r\n     * This tracks whether or not the keyboard has been\r\n     * presented for a single focused text field. Note\r\n     * that it does not track if the keyboard is open\r\n     * in general such as if the keyboard is open for\r\n     * a different focused text field.\r\n     */\r\n    let hasKeyboardBeenPresentedForTextField = false;\r\n    /**\r\n     * When adding scroll padding we need to know\r\n     * how much of the viewport the keyboard obscures.\r\n     * We do this by subtracting the keyboard height\r\n     * from the platform height.\r\n     *\r\n     * If we compute this value when switching between\r\n     * inputs then the webview may already be resized.\r\n     * At this point, `win.innerHeight` has already accounted\r\n     * for the keyboard meaning we would then subtract\r\n     * the keyboard height again. This will result in the input\r\n     * being scrolled more than it needs to.\r\n     */\r\n    const platformHeight = win !== undefined ? win.innerHeight : 0;\r\n    /**\r\n     * Scroll assist is run when a text field\r\n     * is focused. However, it may need to\r\n     * re-run when the keyboard size changes\r\n     * such that the text field is now hidden\r\n     * underneath the keyboard.\r\n     * This function re-runs scroll assist\r\n     * when that happens.\r\n     *\r\n     * One limitation of this is on a web browser\r\n     * where native keyboard APIs do not have cross-browser\r\n     * support. `ionKeyboardDidShow` relies on the Visual Viewport API.\r\n     * This means that if the keyboard changes but does not change\r\n     * geometry, then scroll assist will not re-run even if\r\n     * the user has scrolled the text field under the keyboard.\r\n     * This is not a problem when running in Cordova/Capacitor\r\n     * because `ionKeyboardDidShow` uses the native events\r\n     * which fire every time the keyboard changes.\r\n     */\r\n    const keyboardShow = (ev) => {\r\n        /**\r\n         * If the keyboard has not yet been presented\r\n         * for this text field then the text field has just\r\n         * received focus. In that case, the focusin listener\r\n         * will run scroll assist.\r\n         */\r\n        if (hasKeyboardBeenPresentedForTextField === false) {\r\n            hasKeyboardBeenPresentedForTextField = true;\r\n            return;\r\n        }\r\n        /**\r\n         * Otherwise, the keyboard has already been presented\r\n         * for the focused text field.\r\n         * This means that the keyboard likely changed\r\n         * geometry, and we need to re-run scroll assist.\r\n         * This can happen when the user rotates their device\r\n         * or when they switch keyboards.\r\n         *\r\n         * Make sure we pass in the computed keyboard height\r\n         * rather than the estimated keyboard height.\r\n         *\r\n         * Since the keyboard is already open then we do not\r\n         * need to wait for the webview to resize, so we pass\r\n         * \"waitForResize: false\".\r\n         */\r\n        jsSetFocus(componentEl, inputEl, contentEl, footerEl, ev.detail.keyboardHeight, addScrollPadding, disableClonedInput, platformHeight, false);\r\n    };\r\n    /**\r\n     * Reset the internal state when the text field loses focus.\r\n     */\r\n    const focusOut = () => {\r\n        hasKeyboardBeenPresentedForTextField = false;\r\n        win === null || win === void 0 ? void 0 : win.removeEventListener('ionKeyboardDidShow', keyboardShow);\r\n        componentEl.removeEventListener('focusout', focusOut);\r\n    };\r\n    /**\r\n     * When the input is about to receive\r\n     * focus, we need to move it to prevent\r\n     * mobile Safari from adjusting the viewport.\r\n     */\r\n    const focusIn = async () => {\r\n        /**\r\n         * Scroll assist should not run again\r\n         * on inputs that have been manually\r\n         * focused inside of the scroll assist\r\n         * implementation.\r\n         */\r\n        if (inputEl.hasAttribute(SKIP_SCROLL_ASSIST)) {\r\n            inputEl.removeAttribute(SKIP_SCROLL_ASSIST);\r\n            return;\r\n        }\r\n        jsSetFocus(componentEl, inputEl, contentEl, footerEl, keyboardHeight, addScrollPadding, disableClonedInput, platformHeight);\r\n        win === null || win === void 0 ? void 0 : win.addEventListener('ionKeyboardDidShow', keyboardShow);\r\n        componentEl.addEventListener('focusout', focusOut);\r\n    };\r\n    componentEl.addEventListener('focusin', focusIn);\r\n    return () => {\r\n        componentEl.removeEventListener('focusin', focusIn);\r\n        win === null || win === void 0 ? void 0 : win.removeEventListener('ionKeyboardDidShow', keyboardShow);\r\n        componentEl.removeEventListener('focusout', focusOut);\r\n    };\r\n};\r\n/**\r\n * Use this function when you want to manually\r\n * focus an input but not have scroll assist run again.\r\n */\r\nconst setManualFocus = (el) => {\r\n    var _a;\r\n    /**\r\n     * If element is already focused then\r\n     * a new focusin event will not be dispatched\r\n     * to remove the SKIL_SCROLL_ASSIST attribute.\r\n     */\r\n    if (document.activeElement === el) {\r\n        return;\r\n    }\r\n    /**\r\n     * Optimization for scenarios where the currently focused element is a sibling\r\n     * of the target element. In such cases, we avoid setting `SKIP_SCROLL_ASSIST`.\r\n     *\r\n     * This is crucial for accessibility: input elements can now contain focusable\r\n     * siblings (e.g., clear buttons, slotted elements). If we didn't skip setting\r\n     * the attribute here, screen readers would be unable to navigate to and interact\r\n     * with these sibling elements.\r\n     *\r\n     * Without this check, we would need to call `ev.stopPropagation()` on the\r\n     * 'focusin' event of each focusable sibling to prevent the scroll assist\r\n     * listener from incorrectly moving focus back to the input. That approach\r\n     * would be less maintainable and more error-prone.\r\n     */\r\n    const inputId = el.getAttribute('id');\r\n    const label = el.closest(`label[for=\"${inputId}\"]`);\r\n    const activeElLabel = (_a = document.activeElement) === null || _a === void 0 ? void 0 : _a.closest(`label[for=\"${inputId}\"]`);\r\n    if (label !== null && label === activeElLabel) {\r\n        // If the label is the same as the active element label, then\r\n        // we don't need to set the `SKIP_SCROLL_ASSIST` and reset focus.\r\n        return;\r\n    }\r\n    el.setAttribute(SKIP_SCROLL_ASSIST, 'true');\r\n    el.focus();\r\n};\r\nconst jsSetFocus = async (componentEl, inputEl, contentEl, footerEl, keyboardHeight, enableScrollPadding, disableClonedInput = false, platformHeight = 0, waitForResize = true) => {\r\n    if (!contentEl && !footerEl) {\r\n        return;\r\n    }\r\n    const scrollData = getScrollData(componentEl, (contentEl || footerEl), keyboardHeight, platformHeight);\r\n    if (contentEl && Math.abs(scrollData.scrollAmount) < 4) {\r\n        // the text input is in a safe position that doesn't\r\n        // require it to be scrolled into view, just set focus now\r\n        setManualFocus(inputEl);\r\n        /**\r\n         * Even though the input does not need\r\n         * scroll assist, we should preserve the\r\n         * the scroll padding as users could be moving\r\n         * focus from an input that needs scroll padding\r\n         * to an input that does not need scroll padding.\r\n         * If we remove the scroll padding now, users will\r\n         * see the page jump.\r\n         */\r\n        if (enableScrollPadding && contentEl !== null) {\r\n            setScrollPadding(contentEl, currentPadding);\r\n            setClearScrollPaddingListener(inputEl, contentEl, () => (currentPadding = 0));\r\n        }\r\n        return;\r\n    }\r\n    // temporarily move the focus to the focus holder so the browser\r\n    // doesn't freak out while it's trying to get the input in place\r\n    // at this point the native text input still does not have focus\r\n    relocateInput(componentEl, inputEl, true, scrollData.inputSafeY, disableClonedInput);\r\n    setManualFocus(inputEl);\r\n    /**\r\n     * Relocating/Focusing input causes the\r\n     * click event to be cancelled, so\r\n     * manually fire one here.\r\n     */\r\n    raf(() => componentEl.click());\r\n    /**\r\n     * If enabled, we can add scroll padding to\r\n     * the bottom of the content so that scroll assist\r\n     * has enough room to scroll the input above\r\n     * the keyboard.\r\n     */\r\n    if (enableScrollPadding && contentEl) {\r\n        currentPadding = scrollData.scrollPadding;\r\n        setScrollPadding(contentEl, currentPadding);\r\n    }\r\n    if (typeof window !== 'undefined') {\r\n        let scrollContentTimeout;\r\n        const scrollContent = async () => {\r\n            // clean up listeners and timeouts\r\n            if (scrollContentTimeout !== undefined) {\r\n                clearTimeout(scrollContentTimeout);\r\n            }\r\n            window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\r\n            window.removeEventListener('ionKeyboardDidShow', scrollContent);\r\n            // scroll the input into place\r\n            if (contentEl) {\r\n                await scrollByPoint(contentEl, 0, scrollData.scrollAmount, scrollData.scrollDuration);\r\n            }\r\n            // the scroll view is in the correct position now\r\n            // give the native text input focus\r\n            relocateInput(componentEl, inputEl, false, scrollData.inputSafeY);\r\n            // ensure this is the focused input\r\n            setManualFocus(inputEl);\r\n            /**\r\n             * When the input is about to be blurred\r\n             * we should set a timeout to remove\r\n             * any scroll padding.\r\n             */\r\n            if (enableScrollPadding) {\r\n                setClearScrollPaddingListener(inputEl, contentEl, () => (currentPadding = 0));\r\n            }\r\n        };\r\n        const doubleKeyboardEventListener = () => {\r\n            window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\r\n            window.addEventListener('ionKeyboardDidShow', scrollContent);\r\n        };\r\n        if (contentEl) {\r\n            const scrollEl = await getScrollElement(contentEl);\r\n            /**\r\n             * scrollData will only consider the amount we need\r\n             * to scroll in order to properly bring the input\r\n             * into view. It will not consider the amount\r\n             * we can scroll in the content element.\r\n             * As a result, scrollData may request a greater\r\n             * scroll position than is currently available\r\n             * in the DOM. If this is the case, we need to\r\n             * wait for the webview to resize/the keyboard\r\n             * to show in order for additional scroll\r\n             * bandwidth to become available.\r\n             */\r\n            const totalScrollAmount = scrollEl.scrollHeight - scrollEl.clientHeight;\r\n            if (waitForResize && scrollData.scrollAmount > totalScrollAmount - scrollEl.scrollTop) {\r\n                /**\r\n                 * On iOS devices, the system will show a \"Passwords\" bar above the keyboard\r\n                 * after the initial keyboard is shown. This prevents the webview from resizing\r\n                 * until the \"Passwords\" bar is shown, so we need to wait for that to happen first.\r\n                 */\r\n                if (inputEl.type === 'password') {\r\n                    // Add 50px to account for the \"Passwords\" bar\r\n                    scrollData.scrollAmount += SCROLL_AMOUNT_PADDING;\r\n                    window.addEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\r\n                }\r\n                else {\r\n                    window.addEventListener('ionKeyboardDidShow', scrollContent);\r\n                }\r\n                /**\r\n                 * This should only fire in 2 instances:\r\n                 * 1. The app is very slow.\r\n                 * 2. The app is running in a browser on an old OS\r\n                 * that does not support Ionic Keyboard Events\r\n                 */\r\n                scrollContentTimeout = setTimeout(scrollContent, 1000);\r\n                return;\r\n            }\r\n        }\r\n        scrollContent();\r\n    }\r\n};\r\n\r\nconst INPUT_BLURRING = true;\r\nconst startInputShims = async (config, platform) => {\r\n    /**\r\n     * If doc is undefined then we are in an SSR environment\r\n     * where input shims do not apply.\r\n     */\r\n    if (doc === undefined) {\r\n        return;\r\n    }\r\n    const isIOS = platform === 'ios';\r\n    const isAndroid = platform === 'android';\r\n    /**\r\n     * Hide Caret and Input Blurring are needed on iOS.\r\n     * Scroll Assist and Scroll Padding are needed on iOS and Android\r\n     * with Chrome web browser (not Chrome webview).\r\n     */\r\n    const keyboardHeight = config.getNumber('keyboardHeight', 290);\r\n    const scrollAssist = config.getBoolean('scrollAssist', true);\r\n    const hideCaret = config.getBoolean('hideCaretOnScroll', isIOS);\r\n    /**\r\n     * The team is evaluating if inputBlurring is still needed. As a result\r\n     * this feature is disabled by default as of Ionic 8.0. Developers are\r\n     * able to re-enable it temporarily. The team may remove this utility\r\n     * if it is determined that doing so would not bring any adverse side effects.\r\n     * TODO FW-6014 remove input blurring utility (including implementation)\r\n     */\r\n    const inputBlurring = config.getBoolean('inputBlurring', false);\r\n    const scrollPadding = config.getBoolean('scrollPadding', true);\r\n    const inputs = Array.from(doc.querySelectorAll('ion-input, ion-textarea'));\r\n    const hideCaretMap = new WeakMap();\r\n    const scrollAssistMap = new WeakMap();\r\n    /**\r\n     * Grab the native keyboard resize configuration\r\n     * and pass it to scroll assist. Scroll assist requires\r\n     * that we adjust the input right before the input\r\n     * is about to be focused. If we called `Keyboard.getResizeMode`\r\n     * on focusin in scroll assist, we could potentially adjust the\r\n     * input too late since this call is async.\r\n     */\r\n    const keyboardResizeMode = await Keyboard.getResizeMode();\r\n    const registerInput = async (componentEl) => {\r\n        await new Promise((resolve) => componentOnReady(componentEl, resolve));\r\n        const inputRoot = componentEl.shadowRoot || componentEl;\r\n        const inputEl = inputRoot.querySelector('input') || inputRoot.querySelector('textarea');\r\n        const scrollEl = findClosestIonContent(componentEl);\r\n        const footerEl = !scrollEl ? componentEl.closest('ion-footer') : null;\r\n        if (!inputEl) {\r\n            return;\r\n        }\r\n        if (!!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\r\n            const rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\r\n            hideCaretMap.set(componentEl, rmFn);\r\n        }\r\n        /**\r\n         * date/datetime-locale inputs on mobile devices show date picker\r\n         * overlays instead of keyboards. As a result, scroll assist is\r\n         * not needed. This also works around a bug in iOS <16 where\r\n         * scroll assist causes the browser to lock up. See FW-1997.\r\n         */\r\n        const isDateInput = inputEl.type === 'date' || inputEl.type === 'datetime-local';\r\n        if (!isDateInput &&\r\n            (!!scrollEl || !!footerEl) &&\r\n            scrollAssist &&\r\n            !scrollAssistMap.has(componentEl)) {\r\n            const rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, footerEl, keyboardHeight, scrollPadding, keyboardResizeMode, isAndroid);\r\n            scrollAssistMap.set(componentEl, rmFn);\r\n        }\r\n    };\r\n    const unregisterInput = (componentEl) => {\r\n        if (hideCaret) {\r\n            const fn = hideCaretMap.get(componentEl);\r\n            if (fn) {\r\n                fn();\r\n            }\r\n            hideCaretMap.delete(componentEl);\r\n        }\r\n        if (scrollAssist) {\r\n            const fn = scrollAssistMap.get(componentEl);\r\n            if (fn) {\r\n                fn();\r\n            }\r\n            scrollAssistMap.delete(componentEl);\r\n        }\r\n    };\r\n    if (inputBlurring && INPUT_BLURRING) {\r\n        enableInputBlurring();\r\n    }\r\n    // Input might be already loaded in the DOM before ion-device-hacks did.\r\n    // At this point we need to look for all of the inputs not registered yet\r\n    // and register them.\r\n    for (const input of inputs) {\r\n        registerInput(input);\r\n    }\r\n    doc.addEventListener('ionInputDidLoad', (ev) => {\r\n        registerInput(ev.detail);\r\n    });\r\n    doc.addEventListener('ionInputDidUnload', (ev) => {\r\n        unregisterInput(ev.detail);\r\n    });\r\n};\r\n\r\nexport { startInputShims };\r\n"],
  "mappings": "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",
  "names": ["doc"]
}
