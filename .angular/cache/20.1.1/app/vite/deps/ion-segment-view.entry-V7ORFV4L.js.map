{
  "version": 3,
  "sources": ["../../../../../../node_modules/@ionic/core/dist/esm/ion-segment-view.entry.js"],
  "sourcesContent": ["/*!\r\n * (C) Ionic http://ionicframework.com - MIT License\r\n */\r\nimport { r as registerInstance, d as createEvent, h, j as Host, k as getElement } from './index-B_U9CtaY.js';\r\n\r\nconst segmentViewIosCss = \":host{display:-ms-flexbox;display:flex;height:100%;overflow-x:scroll;-webkit-scroll-snap-type:x mandatory;-ms-scroll-snap-type:x mandatory;scroll-snap-type:x mandatory;scrollbar-width:none;-ms-overflow-style:none}:host::-webkit-scrollbar{display:none}:host(.segment-view-disabled){-ms-touch-action:none;touch-action:none;overflow-x:hidden}:host(.segment-view-scroll-disabled){pointer-events:none}:host(.segment-view-disabled){opacity:0.3}\";\r\n\r\nconst segmentViewMdCss = \":host{display:-ms-flexbox;display:flex;height:100%;overflow-x:scroll;-webkit-scroll-snap-type:x mandatory;-ms-scroll-snap-type:x mandatory;scroll-snap-type:x mandatory;scrollbar-width:none;-ms-overflow-style:none}:host::-webkit-scrollbar{display:none}:host(.segment-view-disabled){-ms-touch-action:none;touch-action:none;overflow-x:hidden}:host(.segment-view-scroll-disabled){pointer-events:none}:host(.segment-view-disabled){opacity:0.3}\";\r\n\r\nconst SegmentView = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        this.ionSegmentViewScroll = createEvent(this, \"ionSegmentViewScroll\", 7);\r\n        this.scrollEndTimeout = null;\r\n        this.isTouching = false;\r\n        /**\r\n         * If `true`, the segment view cannot be interacted with.\r\n         */\r\n        this.disabled = false;\r\n    }\r\n    handleScroll(ev) {\r\n        var _a;\r\n        const { scrollLeft, scrollWidth, clientWidth } = ev.target;\r\n        const scrollRatio = scrollLeft / (scrollWidth - clientWidth);\r\n        this.ionSegmentViewScroll.emit({\r\n            scrollRatio,\r\n            isManualScroll: (_a = this.isManualScroll) !== null && _a !== void 0 ? _a : true,\r\n        });\r\n        // Reset the timeout to check for scroll end\r\n        this.resetScrollEndTimeout();\r\n    }\r\n    /**\r\n     * Handle touch start event to know when the user is actively dragging the segment view.\r\n     */\r\n    handleScrollStart() {\r\n        if (this.scrollEndTimeout) {\r\n            clearTimeout(this.scrollEndTimeout);\r\n            this.scrollEndTimeout = null;\r\n        }\r\n        this.isTouching = true;\r\n    }\r\n    /**\r\n     * Handle touch end event to know when the user is no longer dragging the segment view.\r\n     */\r\n    handleTouchEnd() {\r\n        this.isTouching = false;\r\n    }\r\n    /**\r\n     * Reset the scroll end detection timer. This is called on every scroll event.\r\n     */\r\n    resetScrollEndTimeout() {\r\n        if (this.scrollEndTimeout) {\r\n            clearTimeout(this.scrollEndTimeout);\r\n            this.scrollEndTimeout = null;\r\n        }\r\n        this.scrollEndTimeout = setTimeout(() => {\r\n            this.checkForScrollEnd();\r\n        }, \r\n        // Setting this to a lower value may result in inconsistencies in behavior\r\n        // across browsers (particularly Firefox).\r\n        // Ideally, all of this logic is removed once the scroll end event is\r\n        // supported on all browsers (https://caniuse.com/?search=scrollend)\r\n        100);\r\n    }\r\n    /**\r\n     * Check if the scroll has ended and the user is not actively touching.\r\n     * If the conditions are met (active content is enabled and no active touch),\r\n     * reset the scroll position and emit the scroll end event.\r\n     */\r\n    checkForScrollEnd() {\r\n        // Only emit scroll end event if the active content is not disabled and\r\n        // the user is not touching the segment view\r\n        if (!this.isTouching) {\r\n            this.isManualScroll = undefined;\r\n        }\r\n    }\r\n    /**\r\n     * @internal\r\n     *\r\n     * This method is used to programmatically set the displayed segment content\r\n     * in the segment view. Calling this method will update the `value` of the\r\n     * corresponding segment button.\r\n     *\r\n     * @param id: The id of the segment content to display.\r\n     * @param smoothScroll: Whether to animate the scroll transition.\r\n     */\r\n    async setContent(id, smoothScroll = true) {\r\n        const contents = this.getSegmentContents();\r\n        const index = contents.findIndex((content) => content.id === id);\r\n        if (index === -1)\r\n            return;\r\n        this.isManualScroll = false;\r\n        this.resetScrollEndTimeout();\r\n        const contentWidth = this.el.offsetWidth;\r\n        this.el.scrollTo({\r\n            top: 0,\r\n            left: index * contentWidth,\r\n            behavior: smoothScroll ? 'smooth' : 'instant',\r\n        });\r\n    }\r\n    getSegmentContents() {\r\n        return Array.from(this.el.querySelectorAll('ion-segment-content'));\r\n    }\r\n    render() {\r\n        const { disabled, isManualScroll } = this;\r\n        return (h(Host, { key: '754a374e89fd4dd682eb00497e717242a6f83357', class: {\r\n                'segment-view-disabled': disabled,\r\n                'segment-view-scroll-disabled': isManualScroll === false,\r\n            } }, h(\"slot\", { key: '77366044eb61f0d4bba305bd6f0ef8fd1e25194b' })));\r\n    }\r\n    get el() { return getElement(this); }\r\n};\r\nSegmentView.style = {\r\n    ios: segmentViewIosCss,\r\n    md: segmentViewMdCss\r\n};\r\n\r\nexport { SegmentView as ion_segment_view };\r\n"],
  "mappings": ";;;;;;;;;;;;AAKA,IAAM,oBAAoB;AAE1B,IAAM,mBAAmB;AAEzB,IAAM,cAAc,MAAM;AAAA,EACtB,YAAY,SAAS;AACjB,qBAAiB,MAAM,OAAO;AAC9B,SAAK,uBAAuB,YAAY,MAAM,wBAAwB,CAAC;AACvE,SAAK,mBAAmB;AACxB,SAAK,aAAa;AAIlB,SAAK,WAAW;AAAA,EACpB;AAAA,EACA,aAAa,IAAI;AACb,QAAI;AACJ,UAAM,EAAE,YAAY,aAAa,YAAY,IAAI,GAAG;AACpD,UAAM,cAAc,cAAc,cAAc;AAChD,SAAK,qBAAqB,KAAK;AAAA,MAC3B;AAAA,MACA,iBAAiB,KAAK,KAAK,oBAAoB,QAAQ,OAAO,SAAS,KAAK;AAAA,IAChF,CAAC;AAED,SAAK,sBAAsB;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA,EAIA,oBAAoB;AAChB,QAAI,KAAK,kBAAkB;AACvB,mBAAa,KAAK,gBAAgB;AAClC,WAAK,mBAAmB;AAAA,IAC5B;AACA,SAAK,aAAa;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAIA,iBAAiB;AACb,SAAK,aAAa;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAIA,wBAAwB;AACpB,QAAI,KAAK,kBAAkB;AACvB,mBAAa,KAAK,gBAAgB;AAClC,WAAK,mBAAmB;AAAA,IAC5B;AACA,SAAK,mBAAmB;AAAA,MAAW,MAAM;AACrC,aAAK,kBAAkB;AAAA,MAC3B;AAAA;AAAA;AAAA;AAAA;AAAA,MAKA;AAAA,IAAG;AAAA,EACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,oBAAoB;AAGhB,QAAI,CAAC,KAAK,YAAY;AAClB,WAAK,iBAAiB;AAAA,IAC1B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWM,WAAW,IAAI,eAAe,MAAM;AAAA;AACtC,YAAM,WAAW,KAAK,mBAAmB;AACzC,YAAM,QAAQ,SAAS,UAAU,CAAC,YAAY,QAAQ,OAAO,EAAE;AAC/D,UAAI,UAAU;AACV;AACJ,WAAK,iBAAiB;AACtB,WAAK,sBAAsB;AAC3B,YAAM,eAAe,KAAK,GAAG;AAC7B,WAAK,GAAG,SAAS;AAAA,QACb,KAAK;AAAA,QACL,MAAM,QAAQ;AAAA,QACd,UAAU,eAAe,WAAW;AAAA,MACxC,CAAC;AAAA,IACL;AAAA;AAAA,EACA,qBAAqB;AACjB,WAAO,MAAM,KAAK,KAAK,GAAG,iBAAiB,qBAAqB,CAAC;AAAA,EACrE;AAAA,EACA,SAAS;AACL,UAAM,EAAE,UAAU,eAAe,IAAI;AACrC,WAAQ,EAAE,MAAM,EAAE,KAAK,4CAA4C,OAAO;AAAA,MAClE,yBAAyB;AAAA,MACzB,gCAAgC,mBAAmB;AAAA,IACvD,EAAE,GAAG,EAAE,QAAQ,EAAE,KAAK,2CAA2C,CAAC,CAAC;AAAA,EAC3E;AAAA,EACA,IAAI,KAAK;AAAE,WAAO,WAAW,IAAI;AAAA,EAAG;AACxC;AACA,YAAY,QAAQ;AAAA,EAChB,KAAK;AAAA,EACL,IAAI;AACR;",
  "names": []
}
